!!! 5
%html{:lang=>(attr :lang, 'en')}
  %head
    %meta(charset="#{attr :encoding, 'UTF-8'}")
    /[if IE]
      %meta(http-equiv="X-UA-Compatible" content="IE=edge")
    %meta(name='viewport' content='width=device-width, initial-scale=1.0')
    %meta(name='generator' content="Asciidoctor #{attr 'asciidoctor-version'}")
    - { 'app-name'=>'application-name', 'description'=>nil, 'keywords'=>nil, 'authors'=>'author', 'copyright'=>nil }.each do |key, meta|
      - if attr? key
        %meta{:name=>(meta || key), :content=>(attr key)}
    %title=((doctitle :sanitize => true) || (attr 'untitled-label'))
    - if Asciidoctor::DEFAULT_STYLESHEET_KEYS.include?(attr :stylesheet)
      - if @safe >= Asciidoctor::SafeMode::SECURE || (attr? :linkcss)
        %link(rel='stylesheet'){:href=>normalize_web_path(Asciidoctor::DEFAULT_STYLESHEET_NAME, (attr :stylesdir, ''))}
      - else
        %style=Asciidoctor::Stylesheets.instance.primary_stylesheet_data
    - elsif attr? :stylesheet
      - if @safe >= Asciidoctor::SafeMode::SECURE || (attr? :linkcss)
        %link(rel='stylesheet'){:href=>normalize_web_path((attr :stylesheet), (attr :stylesdir, ''))}
      - else
        %style=read_asset(normalize_system_path((attr :stylesheet), (attr :stylesdir, '')), true)
    - if attr? :icons, 'font'
      - if !(attr 'iconfont-remote', '').nil?
        %link(rel='stylesheet'){:href=>(attr 'iconfont-cdn', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css')}
      - else
        %link(rel='stylesheet'){:href=>normalize_web_path("#{attr 'iconfont-name', 'font-awesome'}.css", (attr :stylesdir, ''))}
    - case attr 'source-highlighter'
    - when 'coderay'
      - if (attr 'coderay-css', 'class') == 'class'
        - if @safe >= Asciidoctor::SafeMode::SECURE || (attr? :linkcss)
          %link(rel='stylesheet'){:href=>normalize_web_path('asciidoctor-coderay.css', (attr :stylesdir, ''))}
        - else
          %style=Asciidoctor::Stylesheets.instance.coderay_stylesheet_data
    - when 'pygments'
      - if (attr 'pygments-css', 'class') == 'class'
        - if @safe >= Asciidoctor::SafeMode::SECURE || (attr? :linkcss)
          %link(rel='stylesheet'){:href=>normalize_web_path('asciidoctor-pygments.css', (attr :stylesdir, ''))}
        - else
          %style=Asciidoctor::Stylesheets.instance.pygments_stylesheet_data(attr 'pygments-style')
    - when 'highlightjs'
      %link(rel='stylesheet' href="#{attr :highlightjsdir, 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4'}/styles/#{attr 'highlightjs-theme', 'googlecode'}.min.css")
      %script(src="#{attr :highlightjsdir, 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4'}/highlight.min.js")
      %script hljs.initHighlightingOnLoad()
    - when 'prismjs'
      - if (attr 'prismjs-theme') != 'rhdocs'
        %link(rel='stylesheet' href="#{attr :prismjsdir, 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0'}/themes/prism#{((attr? 'prismjs-theme') ? '-' : nil)}#{attr 'prismjs-theme', nil}.min.css")
      %script(src="#{attr :prismjsdir, 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0'}/prism.min.js")
      %script(src="#{attr :prismjsdir, 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0'}/plugins/show-language/prism-show-language.min.js")
      %script(src="#{attr :prismjsdir, 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0'}/plugins/keep-markup/prism-keep-markup.js")
      - prism_langs = @document.attr :prismjslangs
      - prism_langs = prism_langs.split(',')
      - if prism_langs
        - prism_langs.each do |item|
          %script(src="#{attr :prismjsdir, 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0'}/components/prism-#{item}.min.js")
    - when 'prettify'
      %link(rel='stylesheet' href="#{attr :prettifydir, 'http://cdnjs.cloudflare.com/ajax/libs/prettify/r298'}/#{attr 'prettify-theme', 'prettify'}.min.css")
      %script(src="#{attr :prettifydir, 'http://cdnjs.cloudflare.com/ajax/libs/prettify/r298'}/prettify.min.js")
      %script document.addEventListener('DOMContentLoaded', prettyPrint)
    - if attr? 'stem'
      %script(type='text/x-mathjax-config')
        :plain
          MathJax.Hub.Config({
            tex2jax: {
              inlineMath: [['\\(','\\)']],
              displayMath: [['\\[','\\]']],
              ignoreClass: 'nostem|nolatexmath'
            },
            asciimath2jax: {
              delimiters: [['\\$','\\$']],
              ignoreClass: 'nostem|noasciimath'
            }
          });
      %script(type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML')
    - unless (docinfo_content = docinfo).empty?
      =docinfo_content
  -# %body{:id => @id, :class=>[doctype, ((attr? 'toc-class') && (attr? :toc) && (attr? 'toc-placement', 'auto') ? "#{attr 'toc-class'} toc-#{attr 'toc-position', 'left'}" : nil)], :style=>("max-width: #{attr 'max-width'};" if (attr? 'max-width'))}
  %body{:id => @id, :class=>[doctype, ((attr? :toc) && (attr? 'toc-placement', 'auto') ? "has-toc toc-#{attr 'toc-position', 'left'}" : nil)], :style=>("max-width: #{attr 'max-width'};" if (attr? 'max-width'))}    
    %article#rhdocs.rhdocs
      - unless noheader
        -# AsciiDoc leaves an empty header div even if there's no doctitle
        %header#rhdocs-header.rhdocs-header
          - if has_header?
            - unless notitle
              %h1=@header.title
            - if (attr? :author) || (attr? :revnumber) || (attr? :revdate) || (attr? :revremark)
              .rhdocs-details
                - if (attr? :author)
                  %dl.rhdocs-author-details
                    - if attr? :author
                      %dt#rhdocs-author.author=attr :author
                      - if attr? :email
                        %dd#rhdocs-email.email=sub_macros(attr :email)
                      - if (authorcount = (attr :authorcount).to_i) > 1
                        - (2..authorcount).each do |idx|
                          %dd{:id=>"author#{idx}", :class=>"author"}=(attr "author_#{idx}")
                          - if attr? "email_#{idx}"
                            %dd{:id=>"email#{idx}", :class=>"email"}= sub_macros(attr "email_#{idx}")
                - if (attr? :revnumber) || (attr? :revdate) || (attr? :revremark)
                  %ul.rhdocs-revisions
                    - if attr? :revnumber
                      %li#rhdocs-revnumber.rhdocs-revnumber #{((attr 'version-label') || '').downcase} #{attr :revnumber}
                    - if attr? :revdate
                      %li#rhdocs-revdate.rhdocs-revdate=attr :revdate
                    - if attr? :revremark
                      %li#rhdocs-revremark.rhdocs-revremark=attr :revremark
      - if (attr? :toc) && (attr? 'toc-placement', 'auto')
        %nav#rhdocs-toc.rhdocs-toc{:class=>(attr 'toc-class', 'toc'), :aria => {:label => (attr 'toc-title')}}
          %h2#rhdocs-toctitle.rhdocs-toctitle=attr 'toc-title'
          =converter.convert self, 'outline'
      %main#rhdocs-content.rhdocs-content
        =content
        - unless !footnotes? || attr?(:nofootnotes)
          #rhdocs-footnotes.rhdocs-footnotes{:aria => {:label => 'Footnotes'}}
            - if footnotes?
              %h2#rhdocs-footnotes.visually-hidden Footnotes
              %ol{:aria => {:labelledby => 'rhdocs-footnotes'}}
                - footnotes.each do |fn|
                  %li.footnote{:id=>['_footnote', fn.index]}
                    =(fn.text)
                    %a(href="#_footnoteref_#{fn.index}"){:title => 'Back to content', :aria => {:label => 'Back to content'}}='&#8617;'
      - unless nofooter
        %footer#rhdocs-footer.rhdocs-footer
          #rhdocs-footer-text.rhdocs-footer-text
            - if attr? :revnumber
              = precede %(#{attr 'version-label'} #{attr :revnumber}) do
                - if attr? 'last-update-label'
                  %br
            - if attr? 'last-update-label'
              #{attr 'last-update-label'} #{attr :localdatetime}
          - unless (docinfo_content = (docinfo :footer)).empty?
            =docinfo_content
