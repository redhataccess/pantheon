@charset "UTF-8";
/*! normalize.css v3.0.0 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
   * Remove default margin.
   */
body {
  margin: 0; }

/* HTML5 display definitions
     ========================================================================== */
/**
   * Correct `block` display not defined in IE 8/9.
   */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
   * 1. Correct `inline-block` display not defined in IE 8/9.
   * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
   */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
   * Prevent modern browsers from displaying `audio` without controls.
   * Remove excess height in iOS 5 devices.
   */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
   * Address `[hidden]` styling not present in IE 8/9.
   * Hide the `template` element in IE, Safari, and Firefox < 22.
   */
[hidden],
template {
  display: none; }

/* Links
     ========================================================================== */
/**
   * Remove the gray background color from active links in IE 10.
   */
a {
  background: transparent; }

/**
   * Improve readability when focused and also mouse hovered in all browsers.
   */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
     ========================================================================== */
/**
   * Address styling not present in IE 8/9, Safari 5, and Chrome.
   */
abbr[title] {
  border-bottom: 0.0625rem dotted; }

/**
   * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
   */
b,
strong {
  font-weight: bold; }

/**
   * Address styling not present in Safari 5 and Chrome.
   */
dfn {
  font-style: italic; }

/**
   * Address variable `h1` font-size and margin within `section` and `article`
   * contexts in Firefox 4+, Safari 5, and Chrome.
   */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
   * Address styling not present in IE 8/9.
   */
mark {
  background: #ff0;
  color: #000; }

/**
   * Address inconsistent and variable font size in all browsers.
   */
small {
  font-size: 80%; }

/**
   * Prevent `sub` and `sup` affecting `line-height` in all browsers.
   */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
     ========================================================================== */
/**
   * Remove border when inside `a` element in IE 8/9.
   */
img {
  border: 0; }

/**
   * Correct overflow displayed oddly in IE 9.
   */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
     ========================================================================== */
/**
   * Address margin not present in IE 8/9 and Safari 5.
   */
figure {
  margin: 1em 2.5rem; }

/**
   * Address differences between Firefox and other browsers.
   */
hr {
  box-sizing: content-box;
  height: 0; }

/**
   * Contain overflow in all browsers.
   */
pre {
  overflow: auto; }

/**
   * Address odd `em`-unit font size rendering in all browsers.
   */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
     ========================================================================== */
/**
   * Known limitation: by default, Chrome and Safari on OS X allow very limited
   * styling of `select`, unless a `border` property is set.
   */
/**
   * 1. Correct color not being inherited.
   *    Known issue: affects color of disabled elements.
   * 2. Correct font properties not being inherited.
   * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
   */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
   * Address `overflow` set to `hidden` in IE 8/9/10.
   */
button {
  overflow: visible; }

/**
   * Address inconsistent `text-transform` inheritance for `button` and `select`.
   * All other form control elements do not inherit `text-transform` values.
   * Correct `button` style inheritance in Firefox, IE 8+, and Opera
   * Correct `select` style inheritance in Firefox.
   */
button,
select {
  text-transform: none; }

/**
   * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
   *    and `video` controls.
   * 2. Correct inability to style clickable `input` types in iOS.
   * 3. Improve usability and consistency of cursor style between image-type
   *    `input` and others.
   */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
   * Re-set default cursor for disabled elements.
   */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
   * Remove inner padding and border in Firefox 4+.
   */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
   * Address Firefox 4+ setting `line-height` on `input` using `!important` in
   * the UA stylesheet.
   */
input {
  line-height: normal; }

/**
   * It's recommended that you don't attempt to style these elements.
   * Firefox's implementation doesn't respect box-sizing, padding, or width.
   *
   * 1. Address box sizing set to `content-box` in IE 8/9/10.
   * 2. Remove excess padding in IE 8/9/10.
   */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Fix the cursor style for Chrome's increment/decrement buttons. For certain
   * `font-size` values of the `input`, it causes the cursor style of the
   * decrement button to change from `default` to `text`.
   */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
   * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
   * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
   *    (include `-moz` to future-proof).
   */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
   * Remove inner padding and search cancel button in Safari and Chrome on OS X.
   * Safari (but not Chrome) clips the cancel button when the search input has
   * padding (and `textfield` appearance).
   */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
   * Define consistent border, margin, and padding.
   */
fieldset {
  border: 0.0625rem solid #c0c0c0;
  margin: 0 0.125rem;
  padding: 0.35em 0.625em 0.75em; }

/**
   * 1. Correct `color` not being inherited in IE 8/9.
   * 2. Remove padding so people aren't caught out if they zero out fieldsets.
   */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Remove default vertical scrollbar in IE 8/9.
   */
textarea {
  overflow: auto; }

/**
   * Don't inherit the `font-weight` (applied by a rule above).
   * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
   */
optgroup {
  font-weight: bold; }

/* Tables
     ========================================================================== */
/**
   * Remove most spacing between table cells.
   */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.rhdocs {
  font-size: 1rem;
  line-height: 1.5;
  font-family: RedHatText, Overpass, "Helvetica Neue", Arial, sans-serif;
  color: #252525;
  -moz-tab-size: 4;
    -o-tab-size: 4;
       tab-size: 4; }
  .rhdocs *,
  .rhdocs *::before,
  .rhdocs *::after {
    box-sizing: border-box; }
  .rhdocs img,
  .rhdocs object,
  .rhdocs svg {
    display: inline-block;
    vertical-align: middle;
    max-width: 100%; }
  .rhdocs hr {
    clear: both;
    margin: 1rem 0;
    height: 0;
    border: 0;
    border-top: 0.0625rem solid #d2d2d2; }
  .rhdocs a {
    color: #06c; }
    .rhdocs a:hover, .rhdocs a:focus {
      color: #003366; }
  .rhdocs p {
    margin: 1rem 0; }
  .rhdocs h1,
  .rhdocs h2,
  .rhdocs h3,
  .rhdocs h4,
  .rhdocs h5,
  .rhdocs h6 {
    margin: 2.25rem 0 1.125rem;
    font-weight: 500; }
  .rhdocs h1,
  .rhdocs h2,
  .rhdocs h3 {
    font-family: RedHatDisplay, Overpass, "Helvetica Neue", Arial, sans-serif;
    line-height: 1.4; }
  .rhdocs h1 {
    margin: 0;
    font-size: 1.96875rem;
    font-weight: 400; }
  .rhdocs h2 {
    font-size: 1.6875rem;
    font-weight: 500; }
  .rhdocs h3 {
    font-size: 1.375rem;
    font-weight: 500; }
  .rhdocs h4 {
    font-size: 1.125rem;
    line-height: 1.5;
    font-weight: 500; }
  .rhdocs h5 {
    font-size: 1.125rem;
    line-height: 1.5;
    font-weight: 700; }
  .rhdocs h6 {
    font-size: 1.125rem;
    line-height: 1.5;
    font-weight: 700; }
  .rhdocs .heading {
    margin: 1rem 0 0;
    font-size: 1rem;
    line-height: 1.5;
    text-transform: normal;
    font-style: normal;
    font-weight: 700;
    color: #a30000; }
    .rhdocs .heading + p,
    .rhdocs .heading + .content > *:first-child {
      margin-top: 0; }
  .rhdocs ul,
  .rhdocs ol {
    margin: 1rem 0;
    padding: 0 0 0 1.5rem; }
    .rhdocs ul > li,
    .rhdocs ol > li {
      margin: 0;
      padding: 0; }
      .rhdocs ul > li > p,
      .rhdocs ol > li > p {
        margin: 0.5rem 0; }
      .rhdocs ul > li > ul,
      .rhdocs ul > li > ol,
      .rhdocs ol > li > ul,
      .rhdocs ol > li > ol {
        margin: 0; }
  .rhdocs dl {
    margin: 1rem 0; }
    .rhdocs dl dt {
      margin: 0.5rem 0;
      font-weight: 600; }
    .rhdocs dl dd {
      margin: 0.5rem 0 0.5rem 1rem; }
      .rhdocs dl dd > p {
        margin: 0.5rem 0; }
  .rhdocs table {
    margin: 2rem 0;
    border: 0.0625rem solid #d2d2d2;
    border-collapse: collapse;
    font-size: 1rem;
    line-height: 1.5;
    table-layout: fixed; }
    .rhdocs table caption {
      margin-top: 0.5rem;
      margin-bottom: 0.5rem;
      color: #585858;
      text-align: left; }
    .rhdocs table td,
    .rhdocs table th {
      padding: 0.5em 1rem;
      border: 0.0625rem solid #d2d2d2; }
      .rhdocs table td.halign-left,
      .rhdocs table th.halign-left {
        text-align: left; }
      .rhdocs table td.halign-center,
      .rhdocs table th.halign-center {
        text-align: center; }
      .rhdocs table td.halign-right,
      .rhdocs table th.halign-right {
        text-align: right; }
      .rhdocs table td.valign-top,
      .rhdocs table th.valign-top {
        vertical-align: top; }
      .rhdocs table td.valign-middle,
      .rhdocs table th.valign-middle {
        vertical-align: middle; }
      .rhdocs table td.valign-bottom,
      .rhdocs table th.valign-bottom {
        vertical-align: bottom; }
    .rhdocs table thead td,
    .rhdocs table thead th {
      background: #f5f5f5;
      font-weight: 600; }
  .rhdocs pre {
    font-family: "Consolas", monospace;
    white-space: pre-wrap;
    word-wrap: break-word;
    word-spacing: normal;
    word-break: break-all;
    font-size: 0.875rem;
    line-height: 1.5; }
  .rhdocs :not(pre) > code {
    padding: 0.25em 0.5em;
    font-family: "Consolas", monospace;
    background: #def3ff;
    color: #004368;
    font-size: 0.875rem;
    line-height: 1.5; }

.rhdocs {
  padding: 2em; }
  :host .rhdocs {
    padding: 0; }
  @media (min-width: 768px) {
    .has-toc.toc-left .rhdocs {
      padding: 0;
      display: grid;
      grid-template-areas: 'toc header' 'toc main' 'toc footer';
      grid-template-columns: 14rem auto;
      grid-template-rows: auto;
      grid-column-gap: 2rem;
      align-items: start; }
      .has-toc.toc-left .rhdocs .rhdocs-header {
        padding: 2rem 2rem 0 0;
        grid-area: header;
        max-width: 65em; }
      .has-toc.toc-left .rhdocs .rhdocs-content {
        padding: 0 2rem 0 0;
        grid-area: main;
        max-width: 65em; }
      .has-toc.toc-left .rhdocs .rhdocs-footer {
        padding: 0 0 2rem;
        grid-area: footer;
        max-width: 65em; }
      .has-toc.toc-left .rhdocs .rhdocs-toc {
        grid-area: toc;
        margin: 0; } }
  @media (min-width: 992px) {
    .has-toc.toc-left .rhdocs {
      grid-template-columns: 20rem auto; } }

.rhdocs-details {
  margin: 1rem 0 3rem;
  padding: 0;
  list-style: none; }

.rh-docs-details-item {
  margin: 0 0 0.5rem;
  font-size: 1rem;
  line-height: 1.5; }

.rhdocs-products {
  margin: 0 0 1rem;
  font-size: 1.5rem;
  line-height: 1.29167;
  font-weight: bold;
  text-transform: uppercase; }

.rhdocs-author-details {
  display: inline-block;
  margin: 0;
  color: #585858; }
  .rhdocs-author-details dt,
  .rhdocs-author-details dd {
    margin: 0;
    padding: 0;
    display: inline-block; }
  .rhdocs-author-details dd::before {
    display: inline-block;
    content: '('; }
  .rhdocs-author-details dd::after {
    display: inline-block;
    content: ')'; }

.rhdocs-revisions {
  display: inline-block;
  margin: 0;
  padding: 0;
  list-style: none;
  color: #585858; }
  .rhdocs-revisions li {
    display: inline-block; }
    .rhdocs-revisions li:not(:last-child)::after {
      display: inline-block;
      content: ', '; }
  .rhdocs-author-details + .rhdocs-revisions::before {
    display: inline-block;
    margin: 0 0.125rem;
    content: '—'; }

.rhdocs-revnumber {
  text-transform: capitalize; }

.rhdocs-toc {
  margin: 1rem 0 2rem;
  padding: 1rem;
  background: #f2f2f2; }
  .rhdocs-toc > *:last-child {
    margin-bottom: 0; }
  .rhdocs-toc .rhdocs-toctitle {
    margin-top: 0;
    font-size: 1.25rem;
    text-transform: none;
    line-height: 1.5;
    font-weight: 600; }
  .rhdocs-toc ol {
    padding-left: 0;
    counter-reset: item; }
    .rhdocs-toc ol li {
      display: table;
      margin: 0.5rem 0; }
      .rhdocs-toc ol li::before {
        display: table-cell;
        padding-right: 0.25rem;
        content: counters(item, ".") ".";
        counter-increment: item; }

.preamble {
  margin: 2rem 0;
  font-size: 1.25rem;
  line-height: 1.5; }
  .preamble .sidebarblock,
  .preamble .admonitionblock {
    font-size: 1rem; }

.sect1 {
  margin: 2rem 0 1rem; }

.admonitionblock {
  margin: 2rem 0;
  padding: 1rem;
  border: 0.0625rem solid #d2d2d2;
  border-left: 0.25rem solid #252525; }
  .admonitionblock.has-icon {
    display: flex;
    flex: 1 1 auto;
    align-items: flex-start; }
    .admonitionblock.has-icon .icon {
      margin-right: 1rem;
      font-size: 1.5rem; }
  .admonitionblock.note {
    color: #004368;
    border-left-color: #39a5dc; }
  .admonitionblock.caution {
    color: #763d04;
    border-left-color: #ec7a08; }
  .admonitionblock.warning {
    color: #795600;
    border-left-color: #f0ab00; }
  .admonitionblock.important {
    color: #470000;
    border-left-color: #a30000; }
  .admonitionblock .content > :first-child {
    margin-top: 0; }
  .admonitionblock .content > :last-child {
    margin-bottom: 0; }

.colist ol {
  margin: 1rem 0 2rem;
  padding: 0;
  list-style: none; }
  .colist ol li {
    margin: 0.5rem 0;
    padding-left: 2rem; }
    .colist ol li .colist-num {
      float: left;
      margin-left: -2rem; }

.colist-num {
  -webkit-user-select: none;
      -ms-user-select: none;
          user-select: none; }

.conum {
  position: relative;
  top: -0.125em;
  display: inline-block;
  padding: 0;
  background: #c00;
  color: #fff;
  border-radius: 50%;
  font-family: RedHatText, Overpass, "Helvetica Neue", Arial, sans-serif;
  font-size: 0.75rem;
  font-weight: 600;
  font-style: normal;
  text-align: center;
  width: 1.25rem;
  height: 1.25rem;
  line-height: 1.35rem;
  vertical-align: middle; }

.literalblock,
.listingblock {
  margin: 1rem 0; }
  .literalblock pre,
  .listingblock pre {
    padding: 1rem;
    background: #252525;
    color: #fff;
    font-family: "Consolas", monospace;
    font-size: 0.875rem;
    line-height: 1.5; }

.verseblock,
.quoteblock {
  margin: 1rem 0;
  padding: 1rem 1rem 1rem 2rem;
  border-left: 0.25rem solid #d2d2d2; }
  .verseblock > :first-child,
  .quoteblock > :first-child {
    margin-top: 0; }
  .verseblock .content,
  .quoteblock .content {
    font-family: RedHatText, Overpass, "Helvetica Neue", Arial, sans-serif;
    font-size: 1.25rem;
    line-height: 1.5; }
  .verseblock .attribution,
  .quoteblock .attribution {
    font-size: 0.875rem;
    line-height: 1.5;
    font-style: italic;
    text-transform: uppercase;
    font-weight: 600; }
    .verseblock .attribution .citetitle,
    .quoteblock .attribution .citetitle {
      color: #585858; }
    .verseblock .attribution cite,
    .quoteblock .attribution cite {
      font-size: 1em; }
  .verseblock.pullleft,
  .quoteblock.pullleft {
    float: left;
    margin-right: 3rem;
    width: 25rem; }
    @media (min-width: 768px) {
      .verseblock.pullleft,
      .quoteblock.pullleft {
        margin-left: -1rem; } }
  .verseblock.pullright,
  .quoteblock.pullright {
    float: right;
    margin-left: 3rem;
    width: 25rem; }
    @media (min-width: 768) {
      .verseblock.pullright,
      .quoteblock.pullright {
        margin-right: -2rem; } }
    @media (min-width: 992px) {
      .verseblock.pullright,
      .quoteblock.pullright {
        margin-right: -10rem; } }

.quoteblock blockquote {
  margin: 0;
  padding: 0;
  font-style: italic; }
  .quoteblock blockquote .content > :first-child {
    margin-top: 0; }
    .quoteblock blockquote .content > :first-child::before {
      content: '“';
      display: block;
      margin-right: 0.5rem;
      float: left;
      color: #e00;
      font-size: 2.75rem;
      font-style: normal;
      line-height: 1.125em; }

.imageblock {
  margin: 1rem 0; }
  .imageblock .caption {
    display: block;
    margin: 0.5rem 0 0;
    font-size: 0.875rem;
    line-height: 1.5;
    color: #585858; }
  .imageblock.pullleft {
    float: left;
    margin-right: 3rem;
    width: 25rem; }
    @media (min-width: 768px) {
      .imageblock.pullleft {
        margin-left: -1rem; } }
  .imageblock.pullright {
    float: right;
    margin-left: 3rem;
    width: 25rem; }
    @media (min-width: 768) {
      .imageblock.pullright {
        margin-right: -2rem; } }
    @media (min-width: 992px) {
      .imageblock.pullright {
        margin-right: -10rem; } }
  .imageblock.interrupter {
    margin: 2rem 0; }
    @media (min-width: 768px) {
      .imageblock.interrupter {
        margin-right: -2rem;
        margin-left: -1rem; }
        .imageblock.interrupter .caption {
          margin-right: 2rem;
          margin-left: 1rem; } }
    @media (min-width: 992px) {
      .imageblock.interrupter {
        margin-right: -10rem; }
        .imageblock.interrupter .caption {
          margin-right: 10rem; } }
    .imageblock.interrupter img {
      max-width: 100%; }

.rhdocs-footnotes {
  margin: 3rem 0 1rem;
  padding: 1rem 0 0;
  border-top: 0.0625rem solid #d2d2d2; }
  .rhdocs-footnotes > ol {
    margin: 0;
    padding: 0 0 0 1.5rem; }
    @supports (counter-reset: footnotenum) {
      .rhdocs-footnotes > ol {
        padding: 0;
        list-style: none;
        counter-reset: footnotenum; }
        .rhdocs-footnotes > ol > li {
          counter-increment: footnotenum; }
          .rhdocs-footnotes > ol > li::before {
            display: inline-block;
            content: "[" counter(footnotenum) "]";
            margin-right: 0.25rem;
            color: #585858; } }

.rhdocs-footer {
  margin: 3rem 0 0;
  padding: 1rem;
  background: #ededed;
  color: #252525;
  font-size: 0.875rem;
  line-height: 1.5; }

.center {
  margin-left: auto;
  margin-right: auto; }

.stretch {
  width: 100%; }

.visually-hidden {
  position: absolute;
  width: 0.0625rem;
  height: 0.0625rem;
  padding: 0;
  margin: -0.0625rem;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0; }

/* PrismJS 1.15.0 Red Hat Theme */
/**

 */
code[class*='language-'],
pre[class*='language-'] {
  text-align: left;
  white-space: pre-wrap;
  word-wrap: break-word;
  word-spacing: normal;
  word-break: break-all;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -ms-hyphens: none;
  hyphens: none; }

/* Code blocks */
pre[class*='language-'] {
  padding: 1em;
  margin: 0.5em 0;
  overflow: auto; }

:not(pre) > code[class*='language-'],
pre[class*='language-'] {
  background: #252525; }

/* Inline code */
:not(pre) > code[class*='language-'] {
  padding: 0.1em;
  border-radius: 0.3em;
  white-space: normal; }

.token.comment,
.token.block-comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #999; }

.token.punctuation {
  color: #ccc; }

.token.tag,
.token.attr-name,
.token.namespace,
.token.deleted {
  color: #e2777a; }

.token.function-name {
  color: #6196cc; }

.token.boolean,
.token.number,
.token.function {
  color: #f08d49; }

.token.property,
.token.class-name,
.token.constant,
.token.symbol {
  color: #f8c555; }

.token.selector,
.token.important,
.token.atrule,
.token.keyword,
.token.builtin {
  color: #cc99cd; }

.token.string,
.token.char,
.token.attr-value,
.token.regex,
.token.variable {
  color: #7ec699; }

.token.operator,
.token.entity,
.token.url {
  color: #67cdcc; }

.token.important,
.token.bold {
  font-weight: bold; }

.token.italic {
  font-style: italic; }

.token.entity {
  cursor: help; }

.token.inserted {
  color: green; }

.icon.fa {
  cursor: default; }

a .icon {
  cursor: inherit; }

.admonitionblock .icon[class^='fa icon-'] {
  font-size: 2.5em;
  cursor: default; }

.admonitionblock .icon.icon-note:before {
  content: '\f05a';
  color: #39a5dc; }

.admonitionblock .icon.icon-tip:before {
  content: '\f0eb'; }

.admonitionblock .icon.icon-warning:before {
  content: '\f071';
  color: #f0ab00; }

.admonitionblock .icon.icon-caution:before {
  content: '\f071';
  color: #ec7a08; }

.admonitionblock .icon.icon-important:before {
  content: '\f06a';
  color: #a30000; }

.literalblock pre code,
.listingblock pre code {
  color: inherit;
  text-shadow: none;
  white-space: inherit !important;
  line-height: inherit;
  font-family: inherit; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
