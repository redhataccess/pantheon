/*! normalize.css v3.0.0 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
   * Remove default margin.
   */
body {
  margin: 0; }

/* HTML5 display definitions
     ========================================================================== */
/**
   * Correct `block` display not defined in IE 8/9.
   */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
   * 1. Correct `inline-block` display not defined in IE 8/9.
   * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
   */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
   * Prevent modern browsers from displaying `audio` without controls.
   * Remove excess height in iOS 5 devices.
   */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
   * Address `[hidden]` styling not present in IE 8/9.
   * Hide the `template` element in IE, Safari, and Firefox < 22.
   */
[hidden],
template {
  display: none; }

/* Links
     ========================================================================== */
/**
   * Remove the gray background color from active links in IE 10.
   */
a {
  background: transparent; }

/**
   * Improve readability when focused and also mouse hovered in all browsers.
   */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
     ========================================================================== */
/**
   * Address styling not present in IE 8/9, Safari 5, and Chrome.
   */
abbr[title] {
  border-bottom: 0.0625rem dotted; }

/**
   * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
   */
b,
strong {
  font-weight: bold; }

/**
   * Address styling not present in Safari 5 and Chrome.
   */
dfn {
  font-style: italic; }

/**
   * Address variable `h1` font-size and margin within `section` and `article`
   * contexts in Firefox 4+, Safari 5, and Chrome.
   */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
   * Address styling not present in IE 8/9.
   */
mark {
  background: #ff0;
  color: #000; }

/**
   * Address inconsistent and variable font size in all browsers.
   */
small {
  font-size: 80%; }

/**
   * Prevent `sub` and `sup` affecting `line-height` in all browsers.
   */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
     ========================================================================== */
/**
   * Remove border when inside `a` element in IE 8/9.
   */
img {
  border: 0; }

/**
   * Correct overflow displayed oddly in IE 9.
   */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
     ========================================================================== */
/**
   * Address margin not present in IE 8/9 and Safari 5.
   */
figure {
  margin: 1em 2.5rem; }

/**
   * Address differences between Firefox and other browsers.
   */
hr {
  box-sizing: content-box;
  height: 0; }

/**
   * Contain overflow in all browsers.
   */
pre {
  overflow: auto; }

/**
   * Address odd `em`-unit font size rendering in all browsers.
   */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
     ========================================================================== */
/**
   * Known limitation: by default, Chrome and Safari on OS X allow very limited
   * styling of `select`, unless a `border` property is set.
   */
/**
   * 1. Correct color not being inherited.
   *    Known issue: affects color of disabled elements.
   * 2. Correct font properties not being inherited.
   * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
   */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
   * Address `overflow` set to `hidden` in IE 8/9/10.
   */
button {
  overflow: visible; }

/**
   * Address inconsistent `text-transform` inheritance for `button` and `select`.
   * All other form control elements do not inherit `text-transform` values.
   * Correct `button` style inheritance in Firefox, IE 8+, and Opera
   * Correct `select` style inheritance in Firefox.
   */
button,
select {
  text-transform: none; }

/**
   * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
   *    and `video` controls.
   * 2. Correct inability to style clickable `input` types in iOS.
   * 3. Improve usability and consistency of cursor style between image-type
   *    `input` and others.
   */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
   * Re-set default cursor for disabled elements.
   */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
   * Remove inner padding and border in Firefox 4+.
   */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
   * Address Firefox 4+ setting `line-height` on `input` using `!important` in
   * the UA stylesheet.
   */
input {
  line-height: normal; }

/**
   * It's recommended that you don't attempt to style these elements.
   * Firefox's implementation doesn't respect box-sizing, padding, or width.
   *
   * 1. Address box sizing set to `content-box` in IE 8/9/10.
   * 2. Remove excess padding in IE 8/9/10.
   */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Fix the cursor style for Chrome's increment/decrement buttons. For certain
   * `font-size` values of the `input`, it causes the cursor style of the
   * decrement button to change from `default` to `text`.
   */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
   * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
   * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
   *    (include `-moz` to future-proof).
   */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
   * Remove inner padding and search cancel button in Safari and Chrome on OS X.
   * Safari (but not Chrome) clips the cancel button when the search input has
   * padding (and `textfield` appearance).
   */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
   * Define consistent border, margin, and padding.
   */
fieldset {
  border: 0.0625rem solid #c0c0c0;
  margin: 0 0.125rem;
  padding: 0.35em 0.625em 0.75em; }

/**
   * 1. Correct `color` not being inherited in IE 8/9.
   * 2. Remove padding so people aren't caught out if they zero out fieldsets.
   */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Remove default vertical scrollbar in IE 8/9.
   */
textarea {
  overflow: auto; }

/**
   * Don't inherit the `font-weight` (applied by a rule above).
   * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
   */
optgroup {
  font-weight: bold; }

/* Tables
     ========================================================================== */
/**
   * Remove most spacing between table cells.
   */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.rhdocs {
  font-size: 1.125rem;
  line-height: 1.5;
  font-family: RedHatText, Overpass, "Helvetica Neue", Arial, sans-serif;
  color: #252525;
  -moz-tab-size: 4;
    -o-tab-size: 4;
       tab-size: 4; }
  .rhdocs *,
  .rhdocs *::before,
  .rhdocs *::after {
    box-sizing: border-box; }

img,
object,
svg {
  display: inline-block;
  vertical-align: middle;
  max-width: 100%; }

hr {
  clear: both;
  margin: 1rem 0;
  height: 0;
  border: 0;
  border-top: 0.0625rem solid #d2d2d2; }

a {
  color: #06c; }
  a:hover, a:focus {
    color: #003366; }

p {
  margin: 1rem 0; }

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 2rem 0 1rem;
  font-weight: 500; }

h1 {
  font-size: 2.25rem;
  line-height: 1.3; }

h2 {
  font-size: 1.75rem;
  line-height: 1.3; }

h3 {
  font-size: 1.5rem;
  line-height: 1.3; }

h4 {
  font-size: 1.25rem;
  line-height: 1.5; }

h5 {
  font-size: 1rem;
  line-height: 1.5;
  font-weight: 700; }

h6 {
  font-size: 1rem;
  line-height: 1.5;
  font-weight: 700; }

.heading {
  margin: 1rem 0 0;
  font-size: 1rem;
  line-height: 1.5;
  text-transform: normal;
  font-style: normal;
  font-weight: 700;
  color: #a30000; }
  .heading + p,
  .heading + .content > *:first-child {
    margin-top: 0; }

ul,
ol {
  margin: 1rem 0;
  padding: 0 0 0 1.5rem; }
  ul > li,
  ol > li {
    margin: 0;
    padding: 0; }
    ul > li > p,
    ol > li > p {
      margin: 0.5rem 0; }
    ul > li > ul,
    ul > li > ol,
    ol > li > ul,
    ol > li > ol {
      margin: 0; }

dl {
  margin: 1rem 0; }
  dl dt {
    margin: 0.5rem 0;
    font-weight: 600; }
  dl dd {
    margin: 0.5rem 0 0.5rem 1rem; }
    dl dd > p {
      margin: 0.5rem 0; }

table {
  margin: 2rem 0;
  border: 0.0625rem solid #d2d2d2;
  border-collapse: collapse;
  font-size: 1rem;
  line-height: 1.5;
  table-layout: fixed; }
  table caption {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    color: #585858;
    text-align: left; }
  table td,
  table th {
    padding: 0.5em 1rem;
    border: 0.0625rem solid #d2d2d2; }
    table td.halign-left,
    table th.halign-left {
      text-align: left; }
    table td.halign-center,
    table th.halign-center {
      text-align: center; }
    table td.halign-right,
    table th.halign-right {
      text-align: right; }
    table td.valign-top,
    table th.valign-top {
      vertical-align: top; }
    table td.valign-middle,
    table th.valign-middle {
      vertical-align: middle; }
    table td.valign-bottom,
    table th.valign-bottom {
      vertical-align: bottom; }
  table thead td,
  table thead th {
    background: #f5f5f5;
    font-weight: 600; }

.rhdocs {
  padding: 2em; }
  @media (min-width: 768px) {
    .has-toc.toc-left .rhdocs {
      padding: 0;
      display: grid;
      grid-template-areas: 'toc header' 'toc main' 'toc footer';
      grid-template-columns: 14rem auto;
      grid-template-rows: auto;
      grid-column-gap: 2rem;
      align-items: start; }
      .has-toc.toc-left .rhdocs .rhdocs-header {
        padding: 2rem 2rem 0 0;
        grid-area: header;
        max-width: 65em; }
      .has-toc.toc-left .rhdocs .rhdocs-content {
        padding: 0 2rem 0 0;
        grid-area: main;
        max-width: 65em; }
      .has-toc.toc-left .rhdocs .rhdocs-footer {
        padding: 0 0 2rem;
        grid-area: footer;
        max-width: 65em; }
      .has-toc.toc-left .rhdocs .rhdocs-toc {
        grid-area: toc;
        margin: 0; } }
  @media (min-width: 992px) {
    .has-toc.toc-left .rhdocs {
      grid-template-columns: 20rem auto; } }

.rhdocs-header h1 {
  margin: 0;
  font-size: 3rem;
  line-height: 1.3; }

.rhdocs-details {
  margin: 1rem 0 3rem;
  padding: 0;
  list-style: none; }

.rh-docs-details-item {
  margin: 0 0 0.5rem;
  font-size: 1rem;
  line-height: 24 / 16; }

.rhdocs-products {
  margin: 0 0 1rem;
  font-size: 1.5rem;
  line-height: 31 / 24;
  font-weight: bold;
  text-transform: uppercase; }

.rhdocs-product-version {
  display: block; }

.rhdocs-author-details {
  display: inline-block;
  margin: 0;
  color: #585858; }
  .rhdocs-author-details dt,
  .rhdocs-author-details dd {
    margin: 0;
    padding: 0;
    display: inline-block; }
  .rhdocs-author-details dd::before {
    display: inline-block;
    content: '('; }
  .rhdocs-author-details dd::after {
    display: inline-block;
    content: ')'; }

.rhdocs-revisions {
  display: inline-block;
  margin: 0;
  padding: 0;
  list-style: none;
  color: #585858; }
  .rhdocs-revisions li {
    display: inline-block; }
    .rhdocs-revisions li:not(:last-child)::after {
      display: inline-block;
      content: ', '; }
  .rhdocs-author-details + .rhdocs-revisions::before {
    display: inline-block;
    margin: 0 0.125rem;
    content: '\2014'; }

.rhdocs-revnumber {
  text-transform: capitalize; }

.rhdocs-toc {
  margin: 1rem 0 2rem;
  padding: 1rem;
  background: #f2f2f2; }
  .rhdocs-toc > *:last-child {
    margin-bottom: 0; }
  .rhdocs-toc .rhdocs-toctitle {
    margin-top: 0;
    font-size: 1.25rem;
    text-transform: none;
    line-height: 1.5;
    font-weight: 600; }
  .rhdocs-toc ol {
    padding-left: 0;
    counter-reset: item; }
    .rhdocs-toc ol li {
      display: table;
      margin: 0.5rem 0; }
      .rhdocs-toc ol li::before {
        display: table-cell;
        padding-right: 0.25rem;
        content: counters(item, ".") ".";
        counter-increment: item; }

.preamble {
  margin: 2rem 0;
  font-size: 1.25rem;
  line-height: 1.5; }
  .preamble .sidebarblock,
  .preamble .admonitionblock {
    font-size: 1rem; }

section.sect1 {
  margin: 2rem 0 1rem; }

.admonitionblock {
  margin: 2rem 0;
  padding: 1rem;
  border: 0.0625rem solid #d2d2d2;
  border-left: 0.25rem solid #252525; }
  .admonitionblock.has-icon {
    display: flex;
    flex: 1 1 auto;
    align-items: flex-start; }
    .admonitionblock.has-icon .icon {
      margin-right: 1rem;
      font-size: 1.5rem; }
  .admonitionblock.note {
    color: #004368;
    border-left-color: #39a5dc; }
  .admonitionblock.caution {
    color: #763d04;
    border-left-color: #ec7a08; }
  .admonitionblock.warning {
    color: #795600;
    border-left-color: #f0ab00; }
  .admonitionblock.important {
    color: #470000;
    border-left-color: #a30000; }
  .admonitionblock .content > :first-child {
    margin-top: 0; }
  .admonitionblock .content > :last-child {
    margin-bottom: 0; }

pre {
  font-family: "Consolas", monospace;
  white-space: pre-wrap;
  word-wrap: break-word;
  word-spacing: normal;
  word-break: break-all;
  font-size: 0.875rem;
  line-height: 1.5; }

:not(pre) > code {
  padding: 0.25em 0.5em;
  font-family: "Consolas", monospace;
  background: #def3ff;
  color: #004368;
  font-size: 0.875rem;
  line-height: 1.5; }

.colist ol {
  margin: 1rem 0 2rem;
  padding: 0;
  list-style: none; }
  .colist ol li {
    margin: 0.5rem 0;
    padding-left: 2rem; }
    .colist ol li .colist-num {
      float: left;
      margin-left: -2rem; }

.colist-num {
  -webkit-user-select: none;
      -ms-user-select: none;
          user-select: none; }

.conum {
  position: relative;
  top: -0.125em;
  display: inline-block;
  padding: 0;
  background: #c00;
  color: #fff;
  border-radius: 50%;
  font-family: RedHatText, Overpass, "Helvetica Neue", Arial, sans-serif;
  font-size: 0.75rem;
  font-weight: 600;
  font-style: normal;
  text-align: center;
  width: 1.25rem;
  height: 1.25rem;
  line-height: 1.35rem;
  vertical-align: middle; }

.literalblock,
.listingblock {
  margin: 1rem 0; }
  .literalblock pre,
  .listingblock pre {
    padding: 1rem;
    background: #252525;
    color: #fff;
    font-family: "Consolas", monospace;
    font-size: 0.875rem;
    line-height: 1.5; }

.verseblock,
.quoteblock {
  margin: 1rem 0;
  padding: 1rem 1rem 1rem 2rem;
  border-left: 0.25rem solid #d2d2d2; }
  .verseblock > :first-child,
  .quoteblock > :first-child {
    margin-top: 0; }
  .verseblock .content,
  .quoteblock .content {
    font-family: RedHatText, Overpass, "Helvetica Neue", Arial, sans-serif;
    font-size: 1.25rem;
    line-height: 1.5; }
  .verseblock .attribution,
  .quoteblock .attribution {
    font-size: 0.875rem;
    line-height: 1.5;
    font-style: italic;
    text-transform: uppercase;
    font-weight: 600; }
    .verseblock .attribution .citetitle,
    .quoteblock .attribution .citetitle {
      color: #585858; }
    .verseblock .attribution cite,
    .quoteblock .attribution cite {
      font-size: 1em; }
  .verseblock.pullleft,
  .quoteblock.pullleft {
    float: left;
    margin-right: 3rem;
    width: 25rem; }
    @media (min-width: 768px) {
      .verseblock.pullleft,
      .quoteblock.pullleft {
        margin-left: -1rem; } }
  .verseblock.pullright,
  .quoteblock.pullright {
    float: right;
    margin-left: 3rem;
    width: 25rem; }
    @media (min-width: 768) {
      .verseblock.pullright,
      .quoteblock.pullright {
        margin-right: -2rem; } }
    @media (min-width: 992px) {
      .verseblock.pullright,
      .quoteblock.pullright {
        margin-right: -10rem; } }

.quoteblock blockquote {
  margin: 0;
  padding: 0;
  font-style: italic; }
  .quoteblock blockquote .content > :first-child {
    margin-top: 0; }
    .quoteblock blockquote .content > :first-child::before {
      display: block;
      margin-right: 0.5rem;
      float: left;
      content: '\201C';
      color: #e00;
      font-size: 2.75rem;
      font-style: normal;
      line-height: 1.125em; }

.imageblock {
  margin: 1rem 0; }
  .imageblock .caption {
    display: block;
    margin: 0.5rem 0 0;
    font-size: 0.875rem;
    line-height: 1.5;
    color: #585858; }
  .imageblock.pullleft {
    float: left;
    margin-right: 3rem;
    width: 25rem; }
    @media (min-width: 768px) {
      .imageblock.pullleft {
        margin-left: -1rem; } }
  .imageblock.pullright {
    float: right;
    margin-left: 3rem;
    width: 25rem; }
    @media (min-width: 768) {
      .imageblock.pullright {
        margin-right: -2rem; } }
    @media (min-width: 992px) {
      .imageblock.pullright {
        margin-right: -10rem; } }
  .imageblock.interrupter {
    margin: 2rem 0; }
    @media (min-width: 768px) {
      .imageblock.interrupter {
        margin-right: -2rem;
        margin-left: -1rem; }
        .imageblock.interrupter .caption {
          margin-right: 2rem;
          margin-left: 1rem; } }
    @media (min-width: 992px) {
      .imageblock.interrupter {
        margin-right: -10rem; }
        .imageblock.interrupter .caption {
          margin-right: 10rem; } }
    .imageblock.interrupter img {
      max-width: 100%; }

.rhdocs-footnotes {
  margin: 3rem 0 1rem;
  padding: 1rem 0 0;
  border-top: 0.0625rem solid #d2d2d2; }
  .rhdocs-footnotes > ol {
    margin: 0;
    padding: 0 0 0 1.5rem; }
    @supports (counter-reset: footnotenum) {
      .rhdocs-footnotes > ol {
        padding: 0;
        list-style: none;
        counter-reset: footnotenum; }
        .rhdocs-footnotes > ol > li {
          counter-increment: footnotenum; }
          .rhdocs-footnotes > ol > li::before {
            display: inline-block;
            content: "[" counter(footnotenum) "]";
            margin-right: 0.25rem;
            color: #585858; } }

.rhdocs-footer {
  margin: 3rem 0 0;
  padding: 1rem;
  background: #ededed;
  color: #252525;
  font-size: 0.875rem;
  line-height: 1.5; }

.center {
  margin-left: auto;
  margin-right: auto; }

.stretch {
  width: 100%; }

.visually-hidden {
  position: absolute;
  width: 0.0625rem;
  height: 0.0625rem;
  padding: 0;
  margin: -0.0625rem;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0; }

/* PrismJS 1.15.0 Red Hat Theme */
/**

 */
code[class*='language-'],
pre[class*='language-'] {
  text-align: left;
  white-space: pre-wrap;
  word-wrap: break-word;
  word-spacing: normal;
  word-break: break-all;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -ms-hyphens: none;
  hyphens: none; }

/* Code blocks */
pre[class*='language-'] {
  padding: 1em;
  margin: 0.5em 0;
  overflow: auto; }

:not(pre) > code[class*='language-'],
pre[class*='language-'] {
  background: #252525; }

/* Inline code */
:not(pre) > code[class*='language-'] {
  padding: 0.1em;
  border-radius: 0.3em;
  white-space: normal; }

.token.comment,
.token.block-comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #999; }

.token.punctuation {
  color: #ccc; }

.token.tag,
.token.attr-name,
.token.namespace,
.token.deleted {
  color: #e2777a; }

.token.function-name {
  color: #6196cc; }

.token.boolean,
.token.number,
.token.function {
  color: #f08d49; }

.token.property,
.token.class-name,
.token.constant,
.token.symbol {
  color: #f8c555; }

.token.selector,
.token.important,
.token.atrule,
.token.keyword,
.token.builtin {
  color: #cc99cd; }

.token.string,
.token.char,
.token.attr-value,
.token.regex,
.token.variable {
  color: #7ec699; }

.token.operator,
.token.entity,
.token.url {
  color: #67cdcc; }

.token.important,
.token.bold {
  font-weight: bold; }

.token.italic {
  font-style: italic; }

.token.entity {
  cursor: help; }

.token.inserted {
  color: green; }

.icon.fa {
  cursor: default; }

a .icon {
  cursor: inherit; }

.admonitionblock .icon[class^='fa icon-'] {
  font-size: 2.5em;
  cursor: default; }

.admonitionblock .icon.icon-note:before {
  content: '\f05a';
  color: #39a5dc; }

.admonitionblock .icon.icon-tip:before {
  content: '\f0eb'; }

.admonitionblock .icon.icon-warning:before {
  content: '\f071';
  color: #f0ab00; }

.admonitionblock .icon.icon-caution:before {
  content: '\f071';
  color: #ec7a08; }

.admonitionblock .icon.icon-important:before {
  content: '\f06a';
  color: #a30000; }

.literalblock pre code,
.listingblock pre code {
  color: inherit;
  text-shadow: none;
  white-space: inherit !important;
  line-height: inherit;
  font-family: inherit; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UvX25vcm1hbGl6ZS5zY3NzIiwicmhkb2NzLmNzcyIsImJhc2UvX2Jhc2Uuc2NzcyIsIl92YXJpYWJsZXMuc2NzcyIsImNvbXBvbmVudHMvX3N0eWxlcy5zY3NzIiwiX21peGlucy5zY3NzIiwiY29tcG9uZW50cy9fcHJpc21qcy5zY3NzIiwiY29tcG9uZW50cy9fZmEtaWNvbnMuc2NzcyIsImNvbXBvbmVudHMvX3BhbnRoZW9uLXRyYW5zaXRpb24uc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSwyREFBQTtBQUVBOzs7O0VDQ0U7QURLRDtFQUNHLHVCQUF1QjtFQUFFLE1BQUE7RUFDekIsMEJBQTBCO0VBQUUsTUFBQTtFQUM1Qiw4QkFBOEI7RUFBRSxNQUFBLEVBQU87O0FBR3pDOztJQ0FFO0FESUY7RUFDRSxTQUFTLEVBQUE7O0FBR1g7aUZDSCtFO0FETS9FOztJQ0hFO0FET0Y7Ozs7Ozs7Ozs7OztFQVlFLGNBQWMsRUFBQTs7QUFHaEI7OztJQ0pFO0FEU0Y7Ozs7RUFJRSxxQkFBcUI7RUFBRSxNQUFBO0VBQ3ZCLHdCQUF3QjtFQUFFLE1BQUEsRUFBTzs7QUFHbkM7OztJQ0pFO0FEU0Y7RUFDRSxhQUFhO0VBQ2IsU0FBUyxFQUFBOztBQUdYOzs7SUNORTtBQUNKOztFRFlJLGFBQWEsRUFBQTs7QUFHZjtpRkNWK0U7QURhL0U7O0lDVkU7QURjRjtFQUNFLHVCQUF1QixFQUFBOztBQUd6Qjs7SUNaRTtBRGdCRjs7RUFFRSxVQUFVLEVBQUE7O0FBR1o7aUZDZitFO0FEa0IvRTs7SUNmRTtBRG1CRjtFQUNFLCtCQUF5QixFQUFBOztBQUczQjs7SUNqQkU7QURxQkY7O0VBRUUsaUJBQWlCLEVBQUE7O0FBR25COztJQ25CRTtBRHVCRjtFQUNFLGtCQUFrQixFQUFBOztBQUdwQjs7O0lDcEJFO0FEeUJGO0VBQ0UsY0FBYztFQUNkLGdCQUFnQixFQUFBOztBQUdsQjs7SUN2QkU7QUQyQkY7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVyxFQUFBOztBQUdiOztJQ3pCRTtBRDZCRjtFQUNFLGNBQWMsRUFBQTs7QUFHaEI7O0lDM0JFO0FEK0JGOztFQUVFLGNBQWM7RUFDZCxjQUFjO0VBQ2Qsa0JBQWtCO0VBQ2xCLHdCQUF3QixFQUFBOztBQUcxQjtFQUNFLFdBQVcsRUFBQTs7QUFHYjtFQUNFLGVBQWUsRUFBQTs7QUFHakI7aUZDaEMrRTtBRG1DL0U7O0lDaENFO0FEb0NGO0VBQ0UsU0FBUyxFQUFBOztBQUdYOztJQ2xDRTtBRHNDRjtFQUNFLGdCQUFnQixFQUFBOztBQUdsQjtpRkNyQytFO0FEd0MvRTs7SUNyQ0U7QUR5Q0Y7RUFDRSxrQkFBZ0IsRUFBQTs7QUFHbEI7O0lDdkNFO0FEMkNGO0VBRUUsdUJBQXVCO0VBQ3ZCLFNBQVMsRUFBQTs7QUFHWDs7SUN6Q0U7QUQ2Q0Y7RUFDRSxjQUFjLEVBQUE7O0FBR2hCOztJQzNDRTtBRCtDRjs7OztFQUlFLGlDQUFpQztFQUNqQyxjQUFjLEVBQUE7O0FBR2hCO2lGQzlDK0U7QURpRC9FOzs7SUM3Q0U7QURrREY7Ozs7O0lDNUNFO0FEbURGOzs7OztFQUtFLGNBQWM7RUFBRSxNQUFBO0VBQ2hCLGFBQWE7RUFBRSxNQUFBO0VBQ2YsU0FBUztFQUFFLE1BQUEsRUFBTzs7QUFHcEI7O0lDOUNFO0FEa0RGO0VBQ0UsaUJBQWlCLEVBQUE7O0FBR25COzs7OztJQzdDRTtBRG9ERjs7RUFFRSxvQkFBb0IsRUFBQTs7QUFHdEI7Ozs7OztJQzlDRTtBRHNERjs7OztFQUlFLDBCQUEwQjtFQUFFLE1BQUE7RUFDNUIsZUFBZTtFQUFFLE1BQUEsRUFBTzs7QUFHMUI7O0lDbERFO0FEc0RGOztFQUVFLGVBQWUsRUFBQTs7QUFHakI7O0lDcERFO0FEd0RGOztFQUVFLFNBQVM7RUFDVCxVQUFVLEVBQUE7O0FBR1o7OztJQ3JERTtBRDBERjtFQUNFLG1CQUFtQixFQUFBOztBQUdyQjs7Ozs7O0lDcERFO0FENERGOztFQUVFLHNCQUFzQjtFQUFFLE1BQUE7RUFDeEIsVUFBVTtFQUFFLE1BQUEsRUFBTzs7QUFHckI7Ozs7SUN0REU7QUQ0REY7O0VBRUUsWUFBWSxFQUFBOztBQUdkOzs7O0lDeERFO0FEOERGO0VBQ0UsNkJBQTZCO0VBQUUsTUFBQTtFQUVFLE1BQUE7RUFDakMsdUJBQXVCLEVBQUE7O0FBR3pCOzs7O0lDeERFO0FEOERGOztFQUVFLHdCQUF3QixFQUFBOztBQUcxQjs7SUM1REU7QURnRUY7RUFDRSwrQkFBeUI7RUFDekIsa0JBQWE7RUFDYiw4QkFBOEIsRUFBQTs7QUFHaEM7OztJQzdERTtBRGtFRjtFQUNFLFNBQVM7RUFBRSxNQUFBO0VBQ1gsVUFBVTtFQUFFLE1BQUEsRUFBTzs7QUFHckI7O0lDOURFO0FEa0VGO0VBQ0UsY0FBYyxFQUFBOztBQUdoQjs7O0lDL0RFO0FEb0VGO0VBQ0UsaUJBQWlCLEVBQUE7O0FBR25CO2lGQ25FK0U7QURzRS9FOztJQ25FRTtBRHVFRjtFQUNFLHlCQUF5QjtFQUN6QixpQkFBaUIsRUFBQTs7QUFHbkI7O0VBRUUsVUFBVSxFQUFBOztBRXZhZDtFQVFFLG1CQ1BnQztFRFFoQyxnQkM4QjhCO0VEN0I5QixzRUNMcUY7RURNckYsY0NtQ21DO0VEbENuQyxnQkFBVztJQUFYLGNBQVc7T0FBWCxXQUFXLEVBQUE7RUFaYjs7O0lBS0ksc0JBQXNCLEVBQUE7O0FBVTFCOzs7RUFHRSxxQkFBcUI7RUFDckIsc0JBQXNCO0VBQ3RCLGVBQWUsRUFBQTs7QUFHakI7RUFDRSxXQUFXO0VBQ1gsY0FBYztFQUNkLFNBQVM7RUFDVCxTQUFTO0VBQ1QsbUNDc0JtQyxFQUFBOztBRGxCckM7RUFDRSxXQ2VnQyxFQUFBO0VEaEJsQztJQUtJLGNBQWdDLEVBQUE7O0FBTXBDO0VBQ0UsY0FBYyxFQUFBOztBQUdoQjs7Ozs7O0VBTUUsbUJBQW1CO0VBQ25CLGdCQUFnQixFQUFBOztBQUdsQjtFQUNFLGtCQzlDZ0M7RUQrQ2hDLGdCQ3JCOEIsRUFBQTs7QUR3QmhDO0VBQ0Usa0JDbERnQztFRG1EaEMsZ0JDMUI4QixFQUFBOztBRDZCaEM7RUFDRSxpQkN0RGdDO0VEdURoQyxnQkMvQjhCLEVBQUE7O0FEa0NoQztFQUNFLGtCQzFEZ0M7RUQyRGhDLGdCQ25DOEIsRUFBQTs7QURzQ2hDO0VBQ0UsZUM5RGdDO0VEK0RoQyxnQkN4QzhCO0VEeUM5QixnQkFBZ0IsRUFBQTs7QUFHbEI7RUFDRSxlQ25FZ0M7RURvRWhDLGdCQzlDOEI7RUQrQzlCLGdCQUFnQixFQUFBOztBQUdsQjtFQUNFLGdCQUFnQjtFQUNoQixlQy9EZ0M7RURnRWhDLGdCQ3JEOEI7RURzRDlCLHNCQ2hFa0M7RURpRWxDLGtCQ2hFa0M7RURpRWxDLGdCQ2hFK0I7RURpRS9CLGNDcERtQyxFQUFBO0VENkNyQzs7SUFXSSxhQUFhLEVBQUE7O0FBS2pCOztFQUVFLGNBQWM7RUFDZCxxQkFBcUIsRUFBQTtFQUh2Qjs7SUFNSSxTQUFTO0lBQ1QsVUFBVSxFQUFBO0lBUGQ7O01BVU0sZ0JBQWdCLEVBQUE7SUFWdEI7Ozs7TUFlTSxTQUFTLEVBQUE7O0FBTWY7RUFDRSxjQUFjLEVBQUE7RUFEaEI7SUFJSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCLEVBQUE7RUFMcEI7SUFTSSw0QkFBNEIsRUFBQTtJQVRoQztNQVlNLGdCQUFnQixFQUFBOztBQU10QjtFQUNFLGNBQWM7RUFDZCwrQkM1RW1DO0VENkVuQyx5QkFBeUI7RUFDekIsZUNsSGdDO0VEbUhoQyxnQkM5RzhCO0VEK0c5QixtQkFBbUIsRUFBQTtFQU5yQjtJQVNJLGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIsY0M1R29EO0lENkdwRCxnQkFBZ0IsRUFBQTtFQVpwQjs7SUFpQkksbUJBQW1CO0lBQ25CLCtCQzVGaUMsRUFBQTtJRDBFckM7O01BdUJNLGdCQUFnQixFQUFBO0lBdkJ0Qjs7TUEyQk0sa0JBQWtCLEVBQUE7SUEzQnhCOztNQStCTSxpQkFBaUIsRUFBQTtJQS9CdkI7O01BbUNNLG1CQUFtQixFQUFBO0lBbkN6Qjs7TUF1Q00sc0JBQXNCLEVBQUE7SUF2QzVCOztNQTJDTSxzQkFBc0IsRUFBQTtFQTNDNUI7O0lBa0RNLG1CQzdIK0I7SUQ4SC9CLGdCQUFnQixFQUFBOztBRW5NdEI7RUFDRSxZQUFZLEVBQUE7RUFJVjtJQURGO01BRUksVUFBVTtNQUVWLGFBQWE7TUFFYix5REFHYztNQUVkLGlDQUFpQztNQUNqQyx3QkFBd0I7TUFDeEIscUJBQXFCO01BQ3JCLGtCQUFrQixFQUFBO01BZHRCO1FBaUJNLHNCQUFzQjtRQUN0QixpQkFBaUI7UUFDakIsZUFBZSxFQUFBO01BbkJyQjtRQXVCTSxtQkFBbUI7UUFDbkIsZUFBZTtRQUNmLGVBQWUsRUFBQTtNQXpCckI7UUE2Qk0saUJBQWlCO1FBQ2pCLGlCQUFpQjtRQUNqQixlQUFlLEVBQUE7TUEvQnJCO1FBbUNNLGNBQWM7UUFDZCxTQUFTLEVBQUEsRUFDVjtFQUdIO0lBeENGO01BeUNJLGlDQUFpQyxFQUFBLEVBRXBDOztBQUlIO0VBRUksU0FBUztFQUNULGVEN0M4QjtFQzhDOUIsZ0JEakI0QixFQUFBOztBQ3FCaEM7RUFDRSxtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLGdCQUFnQixFQUFBOztBQUdsQjtFQUNFLGtCQUFlO0VBQ2YsZUFBZTtFQUNmLG9CQUFvQixFQUFBOztBQUd0QjtFQUNFLGdCQUFnQjtFQUNoQixpQkFBZTtFQUNmLG9CQUFvQjtFQUNwQixpQkFBaUI7RUFDakIseUJBQXlCLEVBQUE7O0FBSzNCO0VBQ0UsY0FBYyxFQUFBOztBQUdoQjtFQUNFLHFCQUFxQjtFQUNyQixTQUFTO0VBQ1QsY0R6Q3NELEVBQUE7RUNzQ3hEOztJQU9JLFNBQVM7SUFDVCxVQUFVO0lBQ1YscUJBQXFCLEVBQUE7RUFUekI7SUFjTSxxQkFBcUI7SUFDckIsWUFBWSxFQUFBO0VBZmxCO0lBbUJNLHFCQUFxQjtJQUNyQixZQUFZLEVBQUE7O0FBS2xCO0VBQ0UscUJBQXFCO0VBQ3JCLFNBQVM7RUFDVCxVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLGNEcEVzRCxFQUFBO0VDK0R4RDtJQVFJLHFCQUFxQixFQUFBO0lBUnpCO01BV00scUJBQXFCO01BQ3JCLGFBQWEsRUFBQTtFQUlqQjtJQUVJLHFCQUFxQjtJQUNyQixrQkFBa0I7SUFDbEIsZ0JBQWdCLEVBQUE7O0FBS3RCO0VBQ0UsMEJBQTBCLEVBQUE7O0FBSTVCO0VBQ0UsbUJBQW1CO0VBQ25CLGFBQWE7RUFDYixtQkFBbUIsRUFBQTtFQUhyQjtJQU1JLGdCQUFnQixFQUFBO0VBTnBCO0lBVUksYUFBYTtJQUNiLGtCRG5JOEI7SUNvSTlCLG9CRG5JOEI7SUNvSTlCLGdCRGxINEI7SUNtSDVCLGdCRG5JNkIsRUFBQTtFQ3FIakM7SUFrQkksZUFBZTtJQUNmLG1CQUFtQixFQUFBO0lBbkJ2QjtNQXNCTSxjQUFjO01BQ2QsZ0JBQWdCLEVBQUE7TUF2QnRCO1FBMEJRLG1CQUFtQjtRQUNuQixzQkFBc0I7UUFDdEIsZ0NBQWdDO1FBQ2hDLHVCQUF1QixFQUFBOztBQU8vQjtFQUNFLGNBQWM7RUFDZCxrQkRsSmdDO0VDbUpoQyxnQkQ1SThCLEVBQUE7RUN5SWhDOztJQU9JLGVBQWUsRUFBQTs7QUFLbkI7RUFFSSxtQkFBbUIsRUFBQTs7QUFPdkI7RUFDRSxjQUFjO0VBQ2QsYUFBYTtFQUNiLCtCRHRKbUM7RUN1Sm5DLGtDRDNKbUMsRUFBQTtFQ3VKckM7SUFPSSxhQUFhO0lBQ2IsY0FBYztJQUNkLHVCQUF1QixFQUFBO0lBVDNCO01BWU0sa0JBQWtCO01BQ2xCLGlCQUFpQixFQUFBO0VBYnZCO0lBb0JJLGNEbEtpQztJQ21LakMsMEJEbEtpQyxFQUFBO0VDNklyQztJQXlCSSxjRG5LaUM7SUNvS2pDLDBCRG5LaUMsRUFBQTtFQ3lJckM7SUE4QkksY0QxS2lDO0lDMktqQywwQkQxS2lDLEVBQUE7RUMySXJDO0lBbUNJLGNEM0tpQztJQzRLakMsMEJEM0tpQyxFQUFBO0VDdUlyQztJQXlDTSxhQUFhLEVBQUE7RUF6Q25CO0lBNkNNLGdCQUFnQixFQUFBOztBQU10QjtFQUNFLGtDRG5QaUQ7RUNvUGpELHFCQUFxQjtFQUNyQixxQkFBcUI7RUFDckIsb0JBQW9CO0VBQ3BCLHFCQUFxQjtFQUVyQixtQkQ1TmdDO0VDNk5oQyxnQkR6TjhCLEVBQUE7O0FDNE5oQztFQUNFLHFCQUFxQjtFQUNyQixrQ0QvUGlEO0VDZ1FqRCxtQkRwTW1DO0VDcU1uQyxjRHBNbUM7RUNxTW5DLG1CRHJPZ0M7RUNzT2hDLGdCRGxPOEIsRUFBQTs7QUNxT2hDO0VBRUksbUJBQW1CO0VBQ25CLFVBQVU7RUFDVixnQkFBZ0IsRUFBQTtFQUpwQjtJQU9NLGdCQUFnQjtJQUNoQixrQkFBa0IsRUFBQTtJQVJ4QjtNQVdRLFdBQVc7TUFDWCxrQkFBa0IsRUFBQTs7QUFNMUI7RUFDRSx5QkFBaUI7TUFBakIscUJBQWlCO1VBQWpCLGlCQUFpQixFQUFBOztBQUduQjtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IscUJBQXFCO0VBQ3JCLFVBQVU7RUFDVixnQkQ1UGdDO0VDNlBoQyxXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLHNFRHJTcUY7RUNzU3JGLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsZUFBZTtFQUNmLG9CQUFvQjtFQUNwQixzQkFBc0IsRUFBQTs7QUFHeEI7O0VBRUUsY0FBYyxFQUFBO0VBRmhCOztJQUtJLGFBQWE7SUFDYixtQkQzUGlDO0lDNFBqQyxXRDNQOEI7SUM0UDlCLGtDRHZUK0M7SUN3VC9DLG1CRDNSOEI7SUM0UjlCLGdCRHhSNEIsRUFBQTs7QUM2UmhDOztFQUVFLGNBQWM7RUFDZCw0QkFBNEI7RUFDNUIsa0NEdFJtQyxFQUFBO0VDa1JyQzs7SUFPSSxhQUFhLEVBQUE7RUFQakI7O0lBV0ksc0VEMVVtRjtJQzJVbkYsa0JEaFQ4QjtJQ2lUOUIsZ0JEMVM0QixFQUFBO0VDNlJoQzs7SUFpQkksbUJEcFQ4QjtJQ3FUOUIsZ0JEL1M0QjtJQ2dUNUIsa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixnQkFBZ0IsRUFBQTtJQXJCcEI7O01Bd0JNLGNEN1NrRCxFQUFBO0lDcVJ4RDs7TUE0Qk0sY0FBYyxFQUFBO0VDN1ZsQjs7SUFDRSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLFlBQVksRUFBQTtJQUVaO01BTEY7O1FBTUksa0JBQWtCLEVBQUEsRUFFckI7RUFNRDs7SUFDRSxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLFlBQVksRUFBQTtJQUVaO01BTEY7O1FBTUksbUJBQW1CLEVBQUEsRUFNdEI7SUFIQztNQVRGOztRQVVJLG9CQUFvQixFQUFBLEVBRXZCOztBRDJVSDtFQUVJLFNBQVM7RUFDVCxVQUFVO0VBQ1Ysa0JBQWtCLEVBQUE7RUFKdEI7SUFRUSxhQUFhLEVBQUE7SUFSckI7TUFXVSxjQUFjO01BQ2Qsb0JBQW9CO01BQ3BCLFdBQVc7TUFDWCxnQkFBZ0I7TUFDaEIsV0Q3VXdCO01DOFV4QixrQkFBa0I7TUFDbEIsa0JBQWtCO01BQ2xCLG9CQUFvQixFQUFBOztBQVE5QjtFQUNFLGNBQWMsRUFBQTtFQURoQjtJQUlJLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsbUJEdlc4QjtJQ3dXOUIsZ0JEbFc0QjtJQ21XNUIsY0QzVm9ELEVBQUE7RUU1Q3REO0lBQ0UsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixZQUFZLEVBQUE7SUFFWjtNQUxGO1FBTUksa0JBQWtCLEVBQUEsRUFFckI7RUFNRDtJQUNFLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsWUFBWSxFQUFBO0lBRVo7TUFMRjtRQU1JLG1CQUFtQixFQUFBLEVBTXRCO0lBSEM7TUFURjtRQVVJLG9CQUFvQixFQUFBLEVBRXZCO0VBTUQ7SUFDRSxjQUFjLEVBQUE7SUFFZDtNQUhGO1FBSUksbUJBQW1CO1FBQ25CLGtCQUFrQixFQUFBO1FBR2hCO1VBQ0Usa0JBQWtCO1VBQ2xCLGlCQUFpQixFQUFBLEVBQ2xCO0lBSUw7TUFmRjtRQWdCSSxvQkFBb0IsRUFBQTtRQUdsQjtVQUNFLG1CQUFtQixFQUFBLEVBQ3BCO0lBS0g7TUFDRSxlQUFlLEVBQUE7O0FEdVZ2QjtFQUNFLG1CQUFtQjtFQUNuQixpQkFBaUI7RUFDakIsbUNEdFdtQyxFQUFBO0VDbVdyQztJQU1JLFNBQVM7SUFDVCxxQkFBcUIsRUFBQTtJQUVpQjtNQVQxQztRQVVNLFVBQVU7UUFDVixnQkFBZ0I7UUFDaEIsMEJBQTBCLEVBQUE7UUFaaEM7VUFlUSw4QkFBOEIsRUFBQTtVQWZ0QztZQWtCVSxxQkFBcUI7WUFDckIscUNBQXFDO1lBQ3JDLHFCQUFxQjtZQUNyQixjRDNYOEMsRUFBQSxFQzRYL0M7O0FBV1Q7RUFDRSxnQkFBZ0I7RUFDaEIsYUFBYTtFQUNiLG1CRHJZbUM7RUNzWW5DLGNEclltQztFQ3NZbkMsbUJEMVpnQztFQzJaaEMsZ0JEclo4QixFQUFBOztBQ3laaEM7RUFDRSxpQkFBaUI7RUFDakIsa0JBQWtCLEVBQUE7O0FBR3BCO0VBQ0UsV0FBVyxFQUFBOztBQUliO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFVO0VBQ1YsaUJBQVc7RUFDWCxVQUFVO0VBQ1Ysa0JBQVk7RUFDWixnQkFBZ0I7RUFDaEIsc0JBQXNCO0VBQ3RCLFNBQVMsRUFBQTs7QUVsZFgsaUNBQUE7QUFDQTs7RUxxMkJFO0FLajJCRjs7RUFLRSxnQkFBZ0I7RUFFaEIscUJBQXFCO0VBQ3JCLHFCQUFxQjtFQUNyQixvQkFBb0I7RUFDcEIscUJBQXFCO0VBSXJCLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2QsV0FBVztFQUVYLHFCQUFxQjtFQUVyQixpQkFBaUI7RUFDakIsYUFBYSxFQUFBOztBQUlmLGdCQUFBO0FBQ0E7RUFDRSxZQUFZO0VBQ1osZUFBZTtFQUNmLGNBQWMsRUFBQTs7QUFHaEI7O0VBRUUsbUJBQW1CLEVBQUE7O0FBR3JCLGdCQUFBO0FBQ0E7RUFDRSxjQUFjO0VBQ2Qsb0JBQW9CO0VBQ3BCLG1CQUFtQixFQUFBOztBQUdyQjs7Ozs7RUFLRSxXQUFXLEVBQUE7O0FBR2I7RUFDRSxXQUFXLEVBQUE7O0FBR2I7Ozs7RUFJRSxjQUFjLEVBQUE7O0FBR2hCO0VBQ0UsY0FBYyxFQUFBOztBQUdoQjs7O0VBR0UsY0FBYyxFQUFBOztBQUdoQjs7OztFQUlFLGNBQWMsRUFBQTs7QUFHaEI7Ozs7O0VBS0UsY0FBYyxFQUFBOztBQUdoQjs7Ozs7RUFLRSxjQUFjLEVBQUE7O0FBR2hCOzs7RUFHRSxjQUFjLEVBQUE7O0FBR2hCOztFQUVFLGlCQUFpQixFQUFBOztBQUduQjtFQUNFLGtCQUFrQixFQUFBOztBQUdwQjtFQUNFLFlBQVksRUFBQTs7QUFHZDtFQUNFLFlBQXFCLEVBQUE7O0FDdkh2QjtFQUVJLGVBQWUsRUFBQTs7QUFHakI7RUFDRSxlQUFlLEVBQUE7O0FBSW5CO0VBRUksZ0JBQWdCO0VBQ2hCLGVBQWUsRUFBQTs7QUFIbkI7RUFPSSxnQkFBZ0I7RUFDaEIsY0pvQ2lDLEVBQUE7O0FJNUNyQztFQVlJLGdCQUFnQixFQUFBOztBQVpwQjtFQWlCSSxnQkFBZ0I7RUFDaEIsY0o0QmlDLEVBQUE7O0FJOUNyQztFQXdCSSxnQkFBZ0I7RUFDaEIsY0p1QmlDLEVBQUE7O0FJaERyQztFQThCSSxnQkFBZ0I7RUFDaEIsY0ptQmlDLEVBQUE7O0FLM0RyQzs7RUFJTSxjQUFjO0VBQ2QsaUJBQWlCO0VBQ2pCLCtCQUErQjtFQUMvQixvQkFBb0I7RUFDcEIsb0JBQW9CLEVBQUEiLCJmaWxlIjoicmhkb2NzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNhc3MtbGludDpkaXNhYmxlLWFsbFxuXG4vKiEgbm9ybWFsaXplLmNzcyB2My4wLjAgfCBNSVQgTGljZW5zZSB8IGdpdC5pby9ub3JtYWxpemUgKi9cblxuLyoqXG4gKiAxLiBTZXQgZGVmYXVsdCBmb250IGZhbWlseSB0byBzYW5zLXNlcmlmLlxuICogMi4gUHJldmVudCBpT1MgdGV4dCBzaXplIGFkanVzdCBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2UsIHdpdGhvdXQgZGlzYWJsaW5nXG4gKiAgICB1c2VyIHpvb20uXG4gKi9cblxuIGh0bWwge1xuICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyAvKiAxICovXG4gICAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgfVxuICBcbiAgLyoqXG4gICAqIFJlbW92ZSBkZWZhdWx0IG1hcmdpbi5cbiAgICovXG4gIFxuICBib2R5IHtcbiAgICBtYXJnaW46IDA7XG4gIH1cbiAgXG4gIC8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qKlxuICAgKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gICAqL1xuICBcbiAgYXJ0aWNsZSxcbiAgYXNpZGUsXG4gIGRldGFpbHMsXG4gIGZpZ2NhcHRpb24sXG4gIGZpZ3VyZSxcbiAgZm9vdGVyLFxuICBoZWFkZXIsXG4gIGhncm91cCxcbiAgbWFpbixcbiAgbmF2LFxuICBzZWN0aW9uLFxuICBzdW1tYXJ5IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuICBcbiAgLyoqXG4gICAqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gICAqIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAgICovXG4gIFxuICBhdWRpbyxcbiAgY2FudmFzLFxuICBwcm9ncmVzcyxcbiAgdmlkZW8ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogMSAqL1xuICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgLyogMiAqL1xuICB9XG4gIFxuICAvKipcbiAgICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAgICogUmVtb3ZlIGV4Y2VzcyBoZWlnaHQgaW4gaU9TIDUgZGV2aWNlcy5cbiAgICovXG4gIFxuICBhdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgaGVpZ2h0OiAwO1xuICB9XG4gIFxuICAvKipcbiAgICogQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LlxuICAgKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUsIFNhZmFyaSwgYW5kIEZpcmVmb3ggPCAyMi5cbiAgICovXG4gIFxuICBbaGlkZGVuXSxcbiAgdGVtcGxhdGUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgXG4gIC8qIExpbmtzXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIFxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gICAqL1xuICBcbiAgYSB7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBJbXByb3ZlIHJlYWRhYmlsaXR5IHdoZW4gZm9jdXNlZCBhbmQgYWxzbyBtb3VzZSBob3ZlcmVkIGluIGFsbCBicm93c2Vycy5cbiAgICovXG4gIFxuICBhOmFjdGl2ZSxcbiAgYTpob3ZlciB7XG4gICAgb3V0bGluZTogMDtcbiAgfVxuICBcbiAgLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgXG4gIC8qKlxuICAgKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAgICovXG4gIFxuICBhYmJyW3RpdGxlXSB7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFkZHJlc3Mgc3R5bGUgc2V0IHRvIGBib2xkZXJgIGluIEZpcmVmb3ggNCssIFNhZmFyaSA1LCBhbmQgQ2hyb21lLlxuICAgKi9cbiAgXG4gIGIsXG4gIHN0cm9uZyB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIDUgYW5kIENocm9tZS5cbiAgICovXG4gIFxuICBkZm4ge1xuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAgICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gICAqL1xuICBcbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgIG1hcmdpbjogMC42N2VtIDA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LlxuICAgKi9cbiAgXG4gIG1hcmsge1xuICAgIGJhY2tncm91bmQ6ICNmZjA7XG4gICAgY29sb3I6ICMwMDA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBZGRyZXNzIGluY29uc2lzdGVudCBhbmQgdmFyaWFibGUgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICovXG4gIFxuICBzbWFsbCB7XG4gICAgZm9udC1zaXplOiA4MCU7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBhZmZlY3RpbmcgYGxpbmUtaGVpZ2h0YCBpbiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuICBcbiAgc3ViLFxuICBzdXAge1xuICAgIGZvbnQtc2l6ZTogNzUlO1xuICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIH1cbiAgXG4gIHN1cCB7XG4gICAgdG9wOiAtMC41ZW07XG4gIH1cbiAgXG4gIHN1YiB7XG4gICAgYm90dG9tOiAtMC4yNWVtO1xuICB9XG4gIFxuICAvKiBFbWJlZGRlZCBjb250ZW50XG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIFxuICAvKipcbiAgICogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkuXG4gICAqL1xuICBcbiAgaW1nIHtcbiAgICBib3JkZXI6IDA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDb3JyZWN0IG92ZXJmbG93IGRpc3BsYXllZCBvZGRseSBpbiBJRSA5LlxuICAgKi9cbiAgXG4gIHN2Zzpub3QoOnJvb3QpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG4gIFxuICAvKiBHcm91cGluZyBjb250ZW50XG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIFxuICAvKipcbiAgICogQWRkcmVzcyBtYXJnaW4gbm90IHByZXNlbnQgaW4gSUUgOC85IGFuZCBTYWZhcmkgNS5cbiAgICovXG4gIFxuICBmaWd1cmUge1xuICAgIG1hcmdpbjogMWVtIDQwcHg7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBZGRyZXNzIGRpZmZlcmVuY2VzIGJldHdlZW4gRmlyZWZveCBhbmQgb3RoZXIgYnJvd3NlcnMuXG4gICAqL1xuICBcbiAgaHIge1xuICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgaGVpZ2h0OiAwO1xuICB9XG4gIFxuICAvKipcbiAgICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuICBcbiAgcHJlIHtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFkZHJlc3Mgb2RkIGBlbWAtdW5pdCBmb250IHNpemUgcmVuZGVyaW5nIGluIGFsbCBicm93c2Vycy5cbiAgICovXG4gIFxuICBjb2RlLFxuICBrYmQsXG4gIHByZSxcbiAgc2FtcCB7XG4gICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICB9XG4gIFxuICAvKiBGb3Jtc1xuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuICBcbiAgLyoqXG4gICAqIEtub3duIGxpbWl0YXRpb246IGJ5IGRlZmF1bHQsIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFggYWxsb3cgdmVyeSBsaW1pdGVkXG4gICAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAgICovXG4gIFxuICAvKipcbiAgICogMS4gQ29ycmVjdCBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICAgKiAgICBLbm93biBpc3N1ZTogYWZmZWN0cyBjb2xvciBvZiBkaXNhYmxlZCBlbGVtZW50cy5cbiAgICogMi4gQ29ycmVjdCBmb250IHByb3BlcnRpZXMgbm90IGJlaW5nIGluaGVyaXRlZC5cbiAgICogMy4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBGaXJlZm94IDQrLCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAgICovXG4gIFxuICBidXR0b24sXG4gIGlucHV0LFxuICBvcHRncm91cCxcbiAgc2VsZWN0LFxuICB0ZXh0YXJlYSB7XG4gICAgY29sb3I6IGluaGVyaXQ7IC8qIDEgKi9cbiAgICBmb250OiBpbmhlcml0OyAvKiAyICovXG4gICAgbWFyZ2luOiAwOyAvKiAzICovXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBZGRyZXNzIGBvdmVyZmxvd2Agc2V0IHRvIGBoaWRkZW5gIGluIElFIDgvOS8xMC5cbiAgICovXG4gIFxuICBidXR0b24ge1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG4gIFxuICAvKipcbiAgICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuICAgKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICAgKiBDb3JyZWN0IGBidXR0b25gIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3gsIElFIDgrLCBhbmQgT3BlcmFcbiAgICogQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LlxuICAgKi9cbiAgXG4gIGJ1dHRvbixcbiAgc2VsZWN0IHtcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gICAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxuICAgKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gICAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gICAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cbiAgICovXG4gIFxuICBidXR0b24sXG4gIGh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSwgLyogMSAqL1xuICBpbnB1dFt0eXBlPVwicmVzZXRcIl0sXG4gIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4gICAgY3Vyc29yOiBwb2ludGVyOyAvKiAzICovXG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICAgKi9cbiAgXG4gIGJ1dHRvbltkaXNhYmxlZF0sXG4gIGh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gICAqL1xuICBcbiAgYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuICBpbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgYm9yZGVyOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gICAqIHRoZSBVQSBzdHlsZXNoZWV0LlxuICAgKi9cbiAgXG4gIGlucHV0IHtcbiAgICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICB9XG4gIFxuICAvKipcbiAgICogSXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSBkb24ndCBhdHRlbXB0IHRvIHN0eWxlIHRoZXNlIGVsZW1lbnRzLlxuICAgKiBGaXJlZm94J3MgaW1wbGVtZW50YXRpb24gZG9lc24ndCByZXNwZWN0IGJveC1zaXppbmcsIHBhZGRpbmcsIG9yIHdpZHRoLlxuICAgKlxuICAgKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICAgKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LzEwLlxuICAgKi9cbiAgXG4gIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbiAgaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gICAgcGFkZGluZzogMDsgLyogMiAqL1xuICB9XG4gIFxuICAvKipcbiAgICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAgICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbiAgICogZGVjcmVtZW50IGJ1dHRvbiB0byBjaGFuZ2UgZnJvbSBgZGVmYXVsdGAgdG8gYHRleHRgLlxuICAgKi9cbiAgXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICAgIGhlaWdodDogYXV0bztcbiAgfVxuICBcbiAgLyoqXG4gICAqIDEuIEFkZHJlc3MgYGFwcGVhcmFuY2VgIHNldCB0byBgc2VhcmNoZmllbGRgIGluIFNhZmFyaSA1IGFuZCBDaHJvbWUuXG4gICAqIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIDUgYW5kIENocm9tZVxuICAgKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAgICovXG4gIFxuICBpbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xuICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMiAqL1xuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICB9XG4gIFxuICAvKipcbiAgICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSBhbmQgQ2hyb21lIG9uIE9TIFguXG4gICAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAgICogcGFkZGluZyAoYW5kIGB0ZXh0ZmllbGRgIGFwcGVhcmFuY2UpLlxuICAgKi9cbiAgXG4gIGlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG4gIGlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAgICovXG4gIFxuICBmaWVsZHNldCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgICBtYXJnaW46IDAgMnB4O1xuICAgIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIDEuIENvcnJlY3QgYGNvbG9yYCBub3QgYmVpbmcgaW5oZXJpdGVkIGluIElFIDgvOS5cbiAgICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICAgKi9cbiAgXG4gIGxlZ2VuZCB7XG4gICAgYm9yZGVyOiAwOyAvKiAxICovXG4gICAgcGFkZGluZzogMDsgLyogMiAqL1xuICB9XG4gIFxuICAvKipcbiAgICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS5cbiAgICovXG4gIFxuICB0ZXh0YXJlYSB7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBEb24ndCBpbmhlcml0IHRoZSBgZm9udC13ZWlnaHRgIChhcHBsaWVkIGJ5IGEgcnVsZSBhYm92ZSkuXG4gICAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICAgKi9cbiAgXG4gIG9wdGdyb3VwIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuICBcbiAgLyogVGFibGVzXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIFxuICAvKipcbiAgICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICAgKi9cbiAgXG4gIHRhYmxlIHtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xuICB9XG4gIFxuICB0ZCxcbiAgdGgge1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgIiwiLyohIG5vcm1hbGl6ZS5jc3MgdjMuMC4wIHwgTUlUIExpY2Vuc2UgfCBnaXQuaW8vbm9ybWFsaXplICovXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuaHRtbCB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICAgKiBSZW1vdmUgZGVmYXVsdCBtYXJnaW4uXG4gICAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKiBIVE1MNSBkaXNwbGF5IGRlZmluaXRpb25zXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICAgKi9cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWFpbixcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyoqXG4gICAqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gICAqIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAgICovXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovIH1cblxuLyoqXG4gICAqIFByZXZlbnQgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyBgYXVkaW9gIHdpdGhvdXQgY29udHJvbHMuXG4gICAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gICAqL1xuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwOyB9XG5cbi8qKlxuICAgKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gICAqIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuICAgKi9cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qIExpbmtzXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gICAqL1xuYSB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyB9XG5cbi8qKlxuICAgKiBJbXByb3ZlIHJlYWRhYmlsaXR5IHdoZW4gZm9jdXNlZCBhbmQgYWxzbyBtb3VzZSBob3ZlcmVkIGluIGFsbCBicm93c2Vycy5cbiAgICovXG5hOmFjdGl2ZSxcbmE6aG92ZXIge1xuICBvdXRsaW5lOiAwOyB9XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOSwgU2FmYXJpIDUsIGFuZCBDaHJvbWUuXG4gICAqL1xuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkOyB9XG5cbi8qKlxuICAgKiBBZGRyZXNzIHN0eWxlIHNldCB0byBgYm9sZGVyYCBpbiBGaXJlZm94IDQrLCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAgICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyoqXG4gICAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICAgKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG4vKipcbiAgICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICAgKiBjb250ZXh0cyBpbiBGaXJlZm94IDQrLCBTYWZhcmkgNSwgYW5kIENocm9tZS5cbiAgICovXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwOyB9XG5cbi8qKlxuICAgKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LlxuICAgKi9cbm1hcmsge1xuICBiYWNrZ3JvdW5kOiAjZmYwO1xuICBjb2xvcjogIzAwMDsgfVxuXG4vKipcbiAgICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYW5kIHZhcmlhYmxlIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTsgfVxuXG4vKipcbiAgICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07IH1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtOyB9XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgKiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS5cbiAgICovXG5pbWcge1xuICBib3JkZXI6IDA7IH1cblxuLyoqXG4gICAqIENvcnJlY3Qgb3ZlcmZsb3cgZGlzcGxheWVkIG9kZGx5IGluIElFIDkuXG4gICAqL1xuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaSA1LlxuICAgKi9cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7IH1cblxuLyoqXG4gICAqIEFkZHJlc3MgZGlmZmVyZW5jZXMgYmV0d2VlbiBGaXJlZm94IGFuZCBvdGhlciBicm93c2Vycy5cbiAgICovXG5ociB7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gICAqIENvbnRhaW4gb3ZlcmZsb3cgaW4gYWxsIGJyb3dzZXJzLlxuICAgKi9cbnByZSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICAgKiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gICAqL1xuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtOyB9XG5cbi8qIEZvcm1zXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAgICogc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LlxuICAgKi9cbi8qKlxuICAgKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gICAqICAgIEtub3duIGlzc3VlOiBhZmZlY3RzIGNvbG9yIG9mIGRpc2FibGVkIGVsZW1lbnRzLlxuICAgKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICAgKiAzLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSA1LCBhbmQgQ2hyb21lLlxuICAgKi9cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgbWFyZ2luOiAwO1xuICAvKiAzICovIH1cblxuLyoqXG4gICAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLlxuICAgKi9cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XG5cbi8qKlxuICAgKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gICAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXG4gICAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOCssIGFuZCBPcGVyYVxuICAgKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gICAqL1xuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqXG4gICAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gICAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxuICAgKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gICAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gICAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cbiAgICovXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi9cbiAgY3Vyc29yOiBwb2ludGVyO1xuICAvKiAzICovIH1cblxuLyoqXG4gICAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gICAqL1xuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0OyB9XG5cbi8qKlxuICAgKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gICAqL1xuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7IH1cblxuLyoqXG4gICAqIEFkZHJlc3MgRmlyZWZveCA0KyBzZXR0aW5nIGBsaW5lLWhlaWdodGAgb24gYGlucHV0YCB1c2luZyBgIWltcG9ydGFudGAgaW5cbiAgICogdGhlIFVBIHN0eWxlc2hlZXQuXG4gICAqL1xuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsOyB9XG5cbi8qKlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRoYXQgeW91IGRvbid0IGF0dGVtcHQgdG8gc3R5bGUgdGhlc2UgZWxlbWVudHMuXG4gICAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gICAqXG4gICAqIDEuIEFkZHJlc3MgYm94IHNpemluZyBzZXQgdG8gYGNvbnRlbnQtYm94YCBpbiBJRSA4LzkvMTAuXG4gICAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gICAqL1xuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLFxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gICAqIEZpeCB0aGUgY3Vyc29yIHN0eWxlIGZvciBDaHJvbWUncyBpbmNyZW1lbnQvZGVjcmVtZW50IGJ1dHRvbnMuIEZvciBjZXJ0YWluXG4gICAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gICAqIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbiAgICovXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bzsgfVxuXG4vKipcbiAgICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIDUgYW5kIENocm9tZS5cbiAgICogMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gICAqICAgIChpbmNsdWRlIGAtbW96YCB0byBmdXR1cmUtcHJvb2YpLlxuICAgKi9cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgLyogMSAqL1xuICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAyICovXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyB9XG5cbi8qKlxuICAgKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAgICogU2FmYXJpIChidXQgbm90IENocm9tZSkgY2xpcHMgdGhlIGNhbmNlbCBidXR0b24gd2hlbiB0aGUgc2VhcmNoIGlucHV0IGhhc1xuICAgKiBwYWRkaW5nIChhbmQgYHRleHRmaWVsZGAgYXBwZWFyYW5jZSkuXG4gICAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IH1cblxuLyoqXG4gICAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAgICovXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTsgfVxuXG4vKipcbiAgICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LlxuICAgKiAyLiBSZW1vdmUgcGFkZGluZyBzbyBwZW9wbGUgYXJlbid0IGNhdWdodCBvdXQgaWYgdGhleSB6ZXJvIG91dCBmaWVsZHNldHMuXG4gICAqL1xubGVnZW5kIHtcbiAgYm9yZGVyOiAwO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAgICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS5cbiAgICovXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICAgKiBEb24ndCBpbmhlcml0IHRoZSBgZm9udC13ZWlnaHRgIChhcHBsaWVkIGJ5IGEgcnVsZSBhYm92ZSkuXG4gICAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICAgKi9cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyogVGFibGVzXG4gICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAgICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICAgKi9cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7IH1cblxudGQsXG50aCB7XG4gIHBhZGRpbmc6IDA7IH1cblxuLnJoZG9jcyB7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgZm9udC1mYW1pbHk6IFJlZEhhdFRleHQsIE92ZXJwYXNzLCBcIkhlbHZldGljYSBOZXVlXCIsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICBjb2xvcjogIzI1MjUyNTtcbiAgdGFiLXNpemU6IDQ7IH1cbiAgLnJoZG9jcyAqLFxuICAucmhkb2NzICo6OmJlZm9yZSxcbiAgLnJoZG9jcyAqOjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG5pbWcsXG5vYmplY3QsXG5zdmcge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIG1heC13aWR0aDogMTAwJTsgfVxuXG5ociB7XG4gIGNsZWFyOiBib3RoO1xuICBtYXJnaW46IDFyZW0gMDtcbiAgaGVpZ2h0OiAwO1xuICBib3JkZXI6IDA7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZDJkMmQyOyB9XG5cbmEge1xuICBjb2xvcjogIzA2YzsgfVxuICBhOmhvdmVyLCBhOmZvY3VzIHtcbiAgICBjb2xvcjogIzAwMzM2NjsgfVxuXG5wIHtcbiAgbWFyZ2luOiAxcmVtIDA7IH1cblxuaDEsXG5oMixcbmgzLFxuaDQsXG5oNSxcbmg2IHtcbiAgbWFyZ2luOiAycmVtIDAgMXJlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDsgfVxuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMzZweDtcbiAgbGluZS1oZWlnaHQ6IDEuMzsgfVxuXG5oMiB7XG4gIGZvbnQtc2l6ZTogMjhweDtcbiAgbGluZS1oZWlnaHQ6IDEuMzsgfVxuXG5oMyB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgbGluZS1oZWlnaHQ6IDEuMzsgfVxuXG5oNCB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDEuNTsgfVxuXG5oNSB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgZm9udC13ZWlnaHQ6IDcwMDsgfVxuXG5oNiB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgZm9udC13ZWlnaHQ6IDcwMDsgfVxuXG4uaGVhZGluZyB7XG4gIG1hcmdpbjogMXJlbSAwIDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgdGV4dC10cmFuc2Zvcm06IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNzAwO1xuICBjb2xvcjogI2EzMDAwMDsgfVxuICAuaGVhZGluZyArIHAsXG4gIC5oZWFkaW5nICsgLmNvbnRlbnQgPiAqOmZpcnN0LWNoaWxkIHtcbiAgICBtYXJnaW4tdG9wOiAwOyB9XG5cbnVsLFxub2wge1xuICBtYXJnaW46IDFyZW0gMDtcbiAgcGFkZGluZzogMCAwIDAgMS41cmVtOyB9XG4gIHVsID4gbGksXG4gIG9sID4gbGkge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwOyB9XG4gICAgdWwgPiBsaSA+IHAsXG4gICAgb2wgPiBsaSA+IHAge1xuICAgICAgbWFyZ2luOiAwLjVyZW0gMDsgfVxuICAgIHVsID4gbGkgPiB1bCxcbiAgICB1bCA+IGxpID4gb2wsXG4gICAgb2wgPiBsaSA+IHVsLFxuICAgIG9sID4gbGkgPiBvbCB7XG4gICAgICBtYXJnaW46IDA7IH1cblxuZGwge1xuICBtYXJnaW46IDFyZW0gMDsgfVxuICBkbCBkdCB7XG4gICAgbWFyZ2luOiAwLjVyZW0gMDtcbiAgICBmb250LXdlaWdodDogNjAwOyB9XG4gIGRsIGRkIHtcbiAgICBtYXJnaW46IDAuNXJlbSAwIDAuNXJlbSAxcmVtOyB9XG4gICAgZGwgZGQgPiBwIHtcbiAgICAgIG1hcmdpbjogMC41cmVtIDA7IH1cblxudGFibGUge1xuICBtYXJnaW46IDJyZW0gMDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2QyZDJkMjtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMS41O1xuICB0YWJsZS1sYXlvdXQ6IGZpeGVkOyB9XG4gIHRhYmxlIGNhcHRpb24ge1xuICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gICAgY29sb3I6ICM1ODU4NTg7XG4gICAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICB0YWJsZSB0ZCxcbiAgdGFibGUgdGgge1xuICAgIHBhZGRpbmc6IDAuNWVtIDFyZW07XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2QyZDJkMjsgfVxuICAgIHRhYmxlIHRkLmhhbGlnbi1sZWZ0LFxuICAgIHRhYmxlIHRoLmhhbGlnbi1sZWZ0IHtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7IH1cbiAgICB0YWJsZSB0ZC5oYWxpZ24tY2VudGVyLFxuICAgIHRhYmxlIHRoLmhhbGlnbi1jZW50ZXIge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gICAgdGFibGUgdGQuaGFsaWduLXJpZ2h0LFxuICAgIHRhYmxlIHRoLmhhbGlnbi1yaWdodCB7XG4gICAgICB0ZXh0LWFsaWduOiByaWdodDsgfVxuICAgIHRhYmxlIHRkLnZhbGlnbi10b3AsXG4gICAgdGFibGUgdGgudmFsaWduLXRvcCB7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9XG4gICAgdGFibGUgdGQudmFsaWduLW1pZGRsZSxcbiAgICB0YWJsZSB0aC52YWxpZ24tbWlkZGxlIHtcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cbiAgICB0YWJsZSB0ZC52YWxpZ24tYm90dG9tLFxuICAgIHRhYmxlIHRoLnZhbGlnbi1ib3R0b20ge1xuICAgICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsgfVxuICB0YWJsZSB0aGVhZCB0ZCxcbiAgdGFibGUgdGhlYWQgdGgge1xuICAgIGJhY2tncm91bmQ6ICNmNWY1ZjU7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuXG4ucmhkb2NzIHtcbiAgcGFkZGluZzogMmVtOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xuICAgIC5oYXMtdG9jLnRvYy1sZWZ0IC5yaGRvY3Mge1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAndG9jIGhlYWRlcicgJ3RvYyBtYWluJyAndG9jIGZvb3Rlcic7XG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDE0cmVtIGF1dG87XG4gICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1nYXA6IDJyZW07XG4gICAgICBhbGlnbi1pdGVtczogc3RhcnQ7IH1cbiAgICAgIC5oYXMtdG9jLnRvYy1sZWZ0IC5yaGRvY3MgLnJoZG9jcy1oZWFkZXIge1xuICAgICAgICBwYWRkaW5nOiAycmVtIDJyZW0gMCAwO1xuICAgICAgICBncmlkLWFyZWE6IGhlYWRlcjtcbiAgICAgICAgbWF4LXdpZHRoOiA2NWVtOyB9XG4gICAgICAuaGFzLXRvYy50b2MtbGVmdCAucmhkb2NzIC5yaGRvY3MtY29udGVudCB7XG4gICAgICAgIHBhZGRpbmc6IDAgMnJlbSAwIDA7XG4gICAgICAgIGdyaWQtYXJlYTogbWFpbjtcbiAgICAgICAgbWF4LXdpZHRoOiA2NWVtOyB9XG4gICAgICAuaGFzLXRvYy50b2MtbGVmdCAucmhkb2NzIC5yaGRvY3MtZm9vdGVyIHtcbiAgICAgICAgcGFkZGluZzogMCAwIDJyZW07XG4gICAgICAgIGdyaWQtYXJlYTogZm9vdGVyO1xuICAgICAgICBtYXgtd2lkdGg6IDY1ZW07IH1cbiAgICAgIC5oYXMtdG9jLnRvYy1sZWZ0IC5yaGRvY3MgLnJoZG9jcy10b2Mge1xuICAgICAgICBncmlkLWFyZWE6IHRvYztcbiAgICAgICAgbWFyZ2luOiAwOyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XG4gICAgLmhhcy10b2MudG9jLWxlZnQgLnJoZG9jcyB7XG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDIwcmVtIGF1dG87IH0gfVxuXG4ucmhkb2NzLWhlYWRlciBoMSB7XG4gIG1hcmdpbjogMDtcbiAgZm9udC1zaXplOiA0OHB4O1xuICBsaW5lLWhlaWdodDogMS4zOyB9XG5cbi5yaGRvY3MtZGV0YWlscyB7XG4gIG1hcmdpbjogMTZweCAwIDQ4cHg7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cblxuLnJoLWRvY3MtZGV0YWlscy1pdGVtIHtcbiAgbWFyZ2luOiAwIDAgOHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyNCAvIDE2OyB9XG5cbi5yaGRvY3MtcHJvZHVjdHMge1xuICBtYXJnaW46IDAgMCAxNnB4O1xuICBmb250LXNpemU6IDI0cHg7XG4gIGxpbmUtaGVpZ2h0OiAzMSAvIDI0O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgfVxuXG4ucmhkb2NzLXByb2R1Y3QtdmVyc2lvbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi5yaGRvY3MtYXV0aG9yLWRldGFpbHMge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMDtcbiAgY29sb3I6ICM1ODU4NTg7IH1cbiAgLnJoZG9jcy1hdXRob3ItZGV0YWlscyBkdCxcbiAgLnJoZG9jcy1hdXRob3ItZGV0YWlscyBkZCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gIC5yaGRvY3MtYXV0aG9yLWRldGFpbHMgZGQ6OmJlZm9yZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGNvbnRlbnQ6ICcoJzsgfVxuICAucmhkb2NzLWF1dGhvci1kZXRhaWxzIGRkOjphZnRlciB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGNvbnRlbnQ6ICcpJzsgfVxuXG4ucmhkb2NzLXJldmlzaW9ucyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBjb2xvcjogIzU4NTg1ODsgfVxuICAucmhkb2NzLXJldmlzaW9ucyBsaSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gICAgLnJoZG9jcy1yZXZpc2lvbnMgbGk6bm90KDpsYXN0LWNoaWxkKTo6YWZ0ZXIge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgY29udGVudDogJywgJzsgfVxuICAucmhkb2NzLWF1dGhvci1kZXRhaWxzICsgLnJoZG9jcy1yZXZpc2lvbnM6OmJlZm9yZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbjogMCAwLjEyNXJlbTtcbiAgICBjb250ZW50OiAnXFwyMDE0JzsgfVxuXG4ucmhkb2NzLXJldm51bWJlciB7XG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplOyB9XG5cbi5yaGRvY3MtdG9jIHtcbiAgbWFyZ2luOiAxcmVtIDAgMnJlbTtcbiAgcGFkZGluZzogMXJlbTtcbiAgYmFja2dyb3VuZDogI2YyZjJmMjsgfVxuICAucmhkb2NzLXRvYyA+ICo6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDsgfVxuICAucmhkb2NzLXRvYyAucmhkb2NzLXRvY3RpdGxlIHtcbiAgICBtYXJnaW4tdG9wOiAwO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICBsaW5lLWhlaWdodDogMS41O1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7IH1cbiAgLnJoZG9jcy10b2Mgb2wge1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBjb3VudGVyLXJlc2V0OiBpdGVtOyB9XG4gICAgLnJoZG9jcy10b2Mgb2wgbGkge1xuICAgICAgZGlzcGxheTogdGFibGU7XG4gICAgICBtYXJnaW46IDAuNXJlbSAwOyB9XG4gICAgICAucmhkb2NzLXRvYyBvbCBsaTo6YmVmb3JlIHtcbiAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMC4yNXJlbTtcbiAgICAgICAgY29udGVudDogY291bnRlcnMoaXRlbSwgXCIuXCIpIFwiLlwiO1xuICAgICAgICBjb3VudGVyLWluY3JlbWVudDogaXRlbTsgfVxuXG4ucHJlYW1ibGUge1xuICBtYXJnaW46IDJyZW0gMDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMS41OyB9XG4gIC5wcmVhbWJsZSAuc2lkZWJhcmJsb2NrLFxuICAucHJlYW1ibGUgLmFkbW9uaXRpb25ibG9jayB7XG4gICAgZm9udC1zaXplOiAxcmVtOyB9XG5cbnNlY3Rpb24uc2VjdDEge1xuICBtYXJnaW46IDJyZW0gMCAxcmVtOyB9XG5cbi5hZG1vbml0aW9uYmxvY2sge1xuICBtYXJnaW46IDJyZW0gMDtcbiAgcGFkZGluZzogMXJlbTtcbiAgYm9yZGVyOiAxcHggc29saWQgI2QyZDJkMjtcbiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjMjUyNTI1OyB9XG4gIC5hZG1vbml0aW9uYmxvY2suaGFzLWljb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleDogMSAxIGF1dG87XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7IH1cbiAgICAuYWRtb25pdGlvbmJsb2NrLmhhcy1pY29uIC5pY29uIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMXJlbTtcbiAgICAgIGZvbnQtc2l6ZTogMS41cmVtOyB9XG4gIC5hZG1vbml0aW9uYmxvY2subm90ZSB7XG4gICAgY29sb3I6ICMwMDQzNjg7XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICMzOWE1ZGM7IH1cbiAgLmFkbW9uaXRpb25ibG9jay5jYXV0aW9uIHtcbiAgICBjb2xvcjogIzc2M2QwNDtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogI2VjN2EwODsgfVxuICAuYWRtb25pdGlvbmJsb2NrLndhcm5pbmcge1xuICAgIGNvbG9yOiAjNzk1NjAwO1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZjBhYjAwOyB9XG4gIC5hZG1vbml0aW9uYmxvY2suaW1wb3J0YW50IHtcbiAgICBjb2xvcjogIzQ3MDAwMDtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogI2EzMDAwMDsgfVxuICAuYWRtb25pdGlvbmJsb2NrIC5jb250ZW50ID4gOmZpcnN0LWNoaWxkIHtcbiAgICBtYXJnaW4tdG9wOiAwOyB9XG4gIC5hZG1vbml0aW9uYmxvY2sgLmNvbnRlbnQgPiA6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDsgfVxuXG5wcmUge1xuICBmb250LWZhbWlseTogXCJDb25zb2xhc1wiLCBtb25vc3BhY2U7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB3b3JkLXNwYWNpbmc6IG5vcm1hbDtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7IH1cblxuOm5vdChwcmUpID4gY29kZSB7XG4gIHBhZGRpbmc6IDAuMjVlbSAwLjVlbTtcbiAgZm9udC1mYW1pbHk6IFwiQ29uc29sYXNcIiwgbW9ub3NwYWNlO1xuICBiYWNrZ3JvdW5kOiAjZGVmM2ZmO1xuICBjb2xvcjogIzAwNDM2ODtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBsaW5lLWhlaWdodDogMS41OyB9XG5cbi5jb2xpc3Qgb2wge1xuICBtYXJnaW46IDFyZW0gMCAycmVtO1xuICBwYWRkaW5nOiAwO1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG4gIC5jb2xpc3Qgb2wgbGkge1xuICAgIG1hcmdpbjogMC41cmVtIDA7XG4gICAgcGFkZGluZy1sZWZ0OiAycmVtOyB9XG4gICAgLmNvbGlzdCBvbCBsaSAuY29saXN0LW51bSB7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAtMnJlbTsgfVxuXG4uY29saXN0LW51bSB7XG4gIHVzZXItc2VsZWN0OiBub25lOyB9XG5cbi5jb251bSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAtMC4xMjVlbTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nOiAwO1xuICBiYWNrZ3JvdW5kOiAjYzAwO1xuICBjb2xvcjogI2ZmZjtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBmb250LWZhbWlseTogUmVkSGF0VGV4dCwgT3ZlcnBhc3MsIFwiSGVsdmV0aWNhIE5ldWVcIiwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHdpZHRoOiAxLjI1cmVtO1xuICBoZWlnaHQ6IDEuMjVyZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjM1cmVtO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XG5cbi5saXRlcmFsYmxvY2ssXG4ubGlzdGluZ2Jsb2NrIHtcbiAgbWFyZ2luOiAxcmVtIDA7IH1cbiAgLmxpdGVyYWxibG9jayBwcmUsXG4gIC5saXN0aW5nYmxvY2sgcHJlIHtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICAgIGJhY2tncm91bmQ6ICMyNTI1MjU7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgZm9udC1mYW1pbHk6IFwiQ29uc29sYXNcIiwgbW9ub3NwYWNlO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBsaW5lLWhlaWdodDogMS41OyB9XG5cbi52ZXJzZWJsb2NrLFxuLnF1b3RlYmxvY2sge1xuICBtYXJnaW46IDFyZW0gMDtcbiAgcGFkZGluZzogMXJlbSAxcmVtIDFyZW0gMnJlbTtcbiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjZDJkMmQyOyB9XG4gIC52ZXJzZWJsb2NrID4gOmZpcnN0LWNoaWxkLFxuICAucXVvdGVibG9jayA+IDpmaXJzdC1jaGlsZCB7XG4gICAgbWFyZ2luLXRvcDogMDsgfVxuICAudmVyc2VibG9jayAuY29udGVudCxcbiAgLnF1b3RlYmxvY2sgLmNvbnRlbnQge1xuICAgIGZvbnQtZmFtaWx5OiBSZWRIYXRUZXh0LCBPdmVycGFzcywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgbGluZS1oZWlnaHQ6IDEuNTsgfVxuICAudmVyc2VibG9jayAuYXR0cmlidXRpb24sXG4gIC5xdW90ZWJsb2NrIC5hdHRyaWJ1dGlvbiB7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuICAgIC52ZXJzZWJsb2NrIC5hdHRyaWJ1dGlvbiAuY2l0ZXRpdGxlLFxuICAgIC5xdW90ZWJsb2NrIC5hdHRyaWJ1dGlvbiAuY2l0ZXRpdGxlIHtcbiAgICAgIGNvbG9yOiAjNTg1ODU4OyB9XG4gICAgLnZlcnNlYmxvY2sgLmF0dHJpYnV0aW9uIGNpdGUsXG4gICAgLnF1b3RlYmxvY2sgLmF0dHJpYnV0aW9uIGNpdGUge1xuICAgICAgZm9udC1zaXplOiAxZW07IH1cbiAgLnZlcnNlYmxvY2sucHVsbGxlZnQsXG4gIC5xdW90ZWJsb2NrLnB1bGxsZWZ0IHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tcmlnaHQ6IDNyZW07XG4gICAgd2lkdGg6IDI1cmVtOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgICAudmVyc2VibG9jay5wdWxsbGVmdCxcbiAgICAgIC5xdW90ZWJsb2NrLnB1bGxsZWZ0IHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0xcmVtOyB9IH1cbiAgLnZlcnNlYmxvY2sucHVsbHJpZ2h0LFxuICAucXVvdGVibG9jay5wdWxscmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBtYXJnaW4tbGVmdDogM3JlbTtcbiAgICB3aWR0aDogMjVyZW07IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4KSB7XG4gICAgICAudmVyc2VibG9jay5wdWxscmlnaHQsXG4gICAgICAucXVvdGVibG9jay5wdWxscmlnaHQge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IC0ycmVtOyB9IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcbiAgICAgIC52ZXJzZWJsb2NrLnB1bGxyaWdodCxcbiAgICAgIC5xdW90ZWJsb2NrLnB1bGxyaWdodCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogLTEwcmVtOyB9IH1cblxuLnF1b3RlYmxvY2sgYmxvY2txdW90ZSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgZm9udC1zdHlsZTogaXRhbGljOyB9XG4gIC5xdW90ZWJsb2NrIGJsb2NrcXVvdGUgLmNvbnRlbnQgPiA6Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi10b3A6IDA7IH1cbiAgICAucXVvdGVibG9jayBibG9ja3F1b3RlIC5jb250ZW50ID4gOmZpcnN0LWNoaWxkOjpiZWZvcmUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgY29udGVudDogJ1xcMjAxQyc7XG4gICAgICBjb2xvcjogI2UwMDtcbiAgICAgIGZvbnQtc2l6ZTogMi43NXJlbTtcbiAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjEyNWVtOyB9XG5cbi5pbWFnZWJsb2NrIHtcbiAgbWFyZ2luOiAxcmVtIDA7IH1cbiAgLmltYWdlYmxvY2sgLmNhcHRpb24ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbjogMC41cmVtIDAgMDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICBjb2xvcjogIzU4NTg1ODsgfVxuICAuaW1hZ2VibG9jay5wdWxsbGVmdCB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtO1xuICAgIHdpZHRoOiAyNXJlbTsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xuICAgICAgLmltYWdlYmxvY2sucHVsbGxlZnQge1xuICAgICAgICBtYXJnaW4tbGVmdDogLTFyZW07IH0gfVxuICAuaW1hZ2VibG9jay5wdWxscmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBtYXJnaW4tbGVmdDogM3JlbTtcbiAgICB3aWR0aDogMjVyZW07IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4KSB7XG4gICAgICAuaW1hZ2VibG9jay5wdWxscmlnaHQge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IC0ycmVtOyB9IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcbiAgICAgIC5pbWFnZWJsb2NrLnB1bGxyaWdodCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogLTEwcmVtOyB9IH1cbiAgLmltYWdlYmxvY2suaW50ZXJydXB0ZXIge1xuICAgIG1hcmdpbjogMnJlbSAwOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgICAuaW1hZ2VibG9jay5pbnRlcnJ1cHRlciB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogLTJyZW07XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAtMXJlbTsgfVxuICAgICAgICAuaW1hZ2VibG9jay5pbnRlcnJ1cHRlciAuY2FwdGlvbiB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxcmVtOyB9IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcbiAgICAgIC5pbWFnZWJsb2NrLmludGVycnVwdGVyIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMTByZW07IH1cbiAgICAgICAgLmltYWdlYmxvY2suaW50ZXJydXB0ZXIgLmNhcHRpb24ge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTByZW07IH0gfVxuICAgIC5pbWFnZWJsb2NrLmludGVycnVwdGVyIGltZyB7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7IH1cblxuLnJoZG9jcy1mb290bm90ZXMge1xuICBtYXJnaW46IDNyZW0gMCAxcmVtO1xuICBwYWRkaW5nOiAxcmVtIDAgMDtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkMmQyZDI7IH1cbiAgLnJoZG9jcy1mb290bm90ZXMgPiBvbCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDAgMCAwIDEuNXJlbTsgfVxuICAgIEBzdXBwb3J0cyAoY291bnRlci1yZXNldDogZm9vdG5vdGVudW0pIHtcbiAgICAgIC5yaGRvY3MtZm9vdG5vdGVzID4gb2wge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgICBjb3VudGVyLXJlc2V0OiBmb290bm90ZW51bTsgfVxuICAgICAgICAucmhkb2NzLWZvb3Rub3RlcyA+IG9sID4gbGkge1xuICAgICAgICAgIGNvdW50ZXItaW5jcmVtZW50OiBmb290bm90ZW51bTsgfVxuICAgICAgICAgIC5yaGRvY3MtZm9vdG5vdGVzID4gb2wgPiBsaTo6YmVmb3JlIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiW1wiIGNvdW50ZXIoZm9vdG5vdGVudW0pIFwiXVwiO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtO1xuICAgICAgICAgICAgY29sb3I6ICM1ODU4NTg7IH0gfVxuXG4ucmhkb2NzLWZvb3RlciB7XG4gIG1hcmdpbjogM3JlbSAwIDA7XG4gIHBhZGRpbmc6IDFyZW07XG4gIGJhY2tncm91bmQ6ICNlZGVkZWQ7XG4gIGNvbG9yOiAjMjUyNTI1O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7IH1cblxuLmNlbnRlciB7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87IH1cblxuLnN0cmV0Y2gge1xuICB3aWR0aDogMTAwJTsgfVxuXG4udmlzdWFsbHktaGlkZGVuIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogMXB4O1xuICBoZWlnaHQ6IDFweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAtMXB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xuICBib3JkZXI6IDA7IH1cblxuLyogUHJpc21KUyAxLjE1LjAgUmVkIEhhdCBUaGVtZSAqL1xuLyoqXG5cbiAqL1xuY29kZVtjbGFzcyo9J2xhbmd1YWdlLSddLFxucHJlW2NsYXNzKj0nbGFuZ3VhZ2UtJ10ge1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgd29yZC1zcGFjaW5nOiBub3JtYWw7XG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgLW1vei10YWItc2l6ZTogNDtcbiAgLW8tdGFiLXNpemU6IDQ7XG4gIHRhYi1zaXplOiA0O1xuICAtd2Via2l0LWh5cGhlbnM6IG5vbmU7XG4gIC1tb3otaHlwaGVuczogbm9uZTtcbiAgLW1zLWh5cGhlbnM6IG5vbmU7XG4gIGh5cGhlbnM6IG5vbmU7IH1cblxuLyogQ29kZSBibG9ja3MgKi9cbnByZVtjbGFzcyo9J2xhbmd1YWdlLSddIHtcbiAgcGFkZGluZzogMWVtO1xuICBtYXJnaW46IDAuNWVtIDA7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPSdsYW5ndWFnZS0nXSxcbnByZVtjbGFzcyo9J2xhbmd1YWdlLSddIHtcbiAgYmFja2dyb3VuZDogIzI1MjUyNTsgfVxuXG4vKiBJbmxpbmUgY29kZSAqL1xuOm5vdChwcmUpID4gY29kZVtjbGFzcyo9J2xhbmd1YWdlLSddIHtcbiAgcGFkZGluZzogMC4xZW07XG4gIGJvcmRlci1yYWRpdXM6IDAuM2VtO1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsOyB9XG5cbi50b2tlbi5jb21tZW50LFxuLnRva2VuLmJsb2NrLWNvbW1lbnQsXG4udG9rZW4ucHJvbG9nLFxuLnRva2VuLmRvY3R5cGUsXG4udG9rZW4uY2RhdGEge1xuICBjb2xvcjogIzk5OTsgfVxuXG4udG9rZW4ucHVuY3R1YXRpb24ge1xuICBjb2xvcjogI2NjYzsgfVxuXG4udG9rZW4udGFnLFxuLnRva2VuLmF0dHItbmFtZSxcbi50b2tlbi5uYW1lc3BhY2UsXG4udG9rZW4uZGVsZXRlZCB7XG4gIGNvbG9yOiAjZTI3NzdhOyB9XG5cbi50b2tlbi5mdW5jdGlvbi1uYW1lIHtcbiAgY29sb3I6ICM2MTk2Y2M7IH1cblxuLnRva2VuLmJvb2xlYW4sXG4udG9rZW4ubnVtYmVyLFxuLnRva2VuLmZ1bmN0aW9uIHtcbiAgY29sb3I6ICNmMDhkNDk7IH1cblxuLnRva2VuLnByb3BlcnR5LFxuLnRva2VuLmNsYXNzLW5hbWUsXG4udG9rZW4uY29uc3RhbnQsXG4udG9rZW4uc3ltYm9sIHtcbiAgY29sb3I6ICNmOGM1NTU7IH1cblxuLnRva2VuLnNlbGVjdG9yLFxuLnRva2VuLmltcG9ydGFudCxcbi50b2tlbi5hdHJ1bGUsXG4udG9rZW4ua2V5d29yZCxcbi50b2tlbi5idWlsdGluIHtcbiAgY29sb3I6ICNjYzk5Y2Q7IH1cblxuLnRva2VuLnN0cmluZyxcbi50b2tlbi5jaGFyLFxuLnRva2VuLmF0dHItdmFsdWUsXG4udG9rZW4ucmVnZXgsXG4udG9rZW4udmFyaWFibGUge1xuICBjb2xvcjogIzdlYzY5OTsgfVxuXG4udG9rZW4ub3BlcmF0b3IsXG4udG9rZW4uZW50aXR5LFxuLnRva2VuLnVybCB7XG4gIGNvbG9yOiAjNjdjZGNjOyB9XG5cbi50b2tlbi5pbXBvcnRhbnQsXG4udG9rZW4uYm9sZCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG5cbi50b2tlbi5pdGFsaWMge1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuLnRva2VuLmVudGl0eSB7XG4gIGN1cnNvcjogaGVscDsgfVxuXG4udG9rZW4uaW5zZXJ0ZWQge1xuICBjb2xvcjogZ3JlZW47IH1cblxuLmljb24uZmEge1xuICBjdXJzb3I6IGRlZmF1bHQ7IH1cblxuYSAuaWNvbiB7XG4gIGN1cnNvcjogaW5oZXJpdDsgfVxuXG4uYWRtb25pdGlvbmJsb2NrIC5pY29uW2NsYXNzXj0nZmEgaWNvbi0nXSB7XG4gIGZvbnQtc2l6ZTogMi41ZW07XG4gIGN1cnNvcjogZGVmYXVsdDsgfVxuXG4uYWRtb25pdGlvbmJsb2NrIC5pY29uLmljb24tbm90ZTpiZWZvcmUge1xuICBjb250ZW50OiAnXFxmMDVhJztcbiAgY29sb3I6ICMzOWE1ZGM7IH1cblxuLmFkbW9uaXRpb25ibG9jayAuaWNvbi5pY29uLXRpcDpiZWZvcmUge1xuICBjb250ZW50OiAnXFxmMGViJzsgfVxuXG4uYWRtb25pdGlvbmJsb2NrIC5pY29uLmljb24td2FybmluZzpiZWZvcmUge1xuICBjb250ZW50OiAnXFxmMDcxJztcbiAgY29sb3I6ICNmMGFiMDA7IH1cblxuLmFkbW9uaXRpb25ibG9jayAuaWNvbi5pY29uLWNhdXRpb246YmVmb3JlIHtcbiAgY29udGVudDogJ1xcZjA3MSc7XG4gIGNvbG9yOiAjZWM3YTA4OyB9XG5cbi5hZG1vbml0aW9uYmxvY2sgLmljb24uaWNvbi1pbXBvcnRhbnQ6YmVmb3JlIHtcbiAgY29udGVudDogJ1xcZjA2YSc7XG4gIGNvbG9yOiAjYTMwMDAwOyB9XG5cbi5saXRlcmFsYmxvY2sgcHJlIGNvZGUsXG4ubGlzdGluZ2Jsb2NrIHByZSBjb2RlIHtcbiAgY29sb3I6IGluaGVyaXQ7XG4gIHRleHQtc2hhZG93OiBub25lO1xuICB3aGl0ZS1zcGFjZTogaW5oZXJpdCAhaW1wb3J0YW50O1xuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IH1cbiIsIi5yaGRvY3Mge1xuICAvLyBCYXNlXG4gICosXG4gICo6OmJlZm9yZSxcbiAgKjo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICBmb250LXNpemU6ICRmb250LXNpemUtLWJhc2U7XG4gIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWJhc2U7XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHktLWJhc2U7XG4gIGNvbG9yOiAkY29sb3ItLXRleHQ7XG4gIHRhYi1zaXplOiA0O1xufVxuXG5pbWcsXG5vYmplY3QsXG5zdmcge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuaHIge1xuICBjbGVhcjogYm90aDtcbiAgbWFyZ2luOiAxcmVtIDA7XG4gIGhlaWdodDogMDtcbiAgYm9yZGVyOiAwO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgJGNvbG9yLS1ib3JkZXI7XG59XG5cbi8vIFVJIC8gTGlua3NcbmEge1xuICBjb2xvcjogJGNvbG9yLS1saW5rO1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIGNvbG9yOiBkYXJrZW4oJGNvbG9yLS1saW5rLCAyMCUpO1xuICB9XG59XG5cblxuLy8gQmFzaWMgVHlwb2dyYXBoeVxucCB7XG4gIG1hcmdpbjogMXJlbSAwO1xufVxuXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYge1xuICBtYXJnaW46IDJyZW0gMCAxcmVtO1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG5oMSB7XG4gIGZvbnQtc2l6ZTogJGhlYWRpbmctLTE7XG4gIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWxnO1xufVxuXG5oMiB7XG4gIGZvbnQtc2l6ZTogJGhlYWRpbmctLTI7XG4gIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWxnO1xufVxuXG5oMyB7XG4gIGZvbnQtc2l6ZTogJGhlYWRpbmctLTM7XG4gIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWxnO1xufVxuXG5oNCB7XG4gIGZvbnQtc2l6ZTogJGhlYWRpbmctLTQ7XG4gIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWJhc2U7XG59XG5cbmg1IHtcbiAgZm9udC1zaXplOiAkaGVhZGluZy0tNTtcbiAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC0tYmFzZTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbn1cblxuaDYge1xuICBmb250LXNpemU6ICRoZWFkaW5nLS02O1xuICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LS1iYXNlO1xuICBmb250LXdlaWdodDogNzAwO1xufVxuXG4uaGVhZGluZyB7XG4gIG1hcmdpbjogMXJlbSAwIDA7XG4gIGZvbnQtc2l6ZTogJGhlYWRpbmctLWJsb2NrO1xuICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LS1iYXNlO1xuICB0ZXh0LXRyYW5zZm9ybTogJGhlYWRpbmctLWJsb2NrLS10cmFuc2Zvcm07XG4gIGZvbnQtc3R5bGU6ICRoZWFkaW5nLS1ibG9jay0tc3R5bGU7XG4gIGZvbnQtd2VpZ2h0OiAkaGVhZGluZy0tYmxvY2stLXdlaWdodDtcbiAgY29sb3I6ICRjb2xvci0tYnJhbmQtcHJpbWFyeS1kYXJrZXI7XG5cbiAgKyBwLFxuICArIC5jb250ZW50ID4gKjpmaXJzdC1jaGlsZCB7XG4gICAgbWFyZ2luLXRvcDogMDtcbiAgfVxufVxuXG4vLyBMaXN0c1xudWwsXG5vbCB7XG4gIG1hcmdpbjogMXJlbSAwO1xuICBwYWRkaW5nOiAwIDAgMCAxLjVyZW07XG5cbiAgPiBsaSB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG5cbiAgICA+IHAge1xuICAgICAgbWFyZ2luOiAwLjVyZW0gMDtcbiAgICB9XG5cbiAgICA+IHVsLFxuICAgID4gb2wge1xuICAgICAgbWFyZ2luOiAwO1xuICAgIH1cblxuICB9XG59XG5cbmRsIHtcbiAgbWFyZ2luOiAxcmVtIDA7XG5cbiAgZHQge1xuICAgIG1hcmdpbjogMC41cmVtIDA7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgfVxuXG4gIGRkIHtcbiAgICBtYXJnaW46IDAuNXJlbSAwIDAuNXJlbSAxcmVtO1xuXG4gICAgPiBwIHtcbiAgICAgIG1hcmdpbjogMC41cmVtIDA7XG4gICAgfVxuICB9XG59XG5cbi8vIFRhYmxlc1xudGFibGUge1xuICBtYXJnaW46IDJyZW0gMDtcbiAgYm9yZGVyOiAxcHggc29saWQgJGNvbG9yLS10YWJsZS0tYm9yZGVyO1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBmb250LXNpemU6ICRmb250LXNpemUtLW1kO1xuICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LS1iYXNlO1xuICB0YWJsZS1sYXlvdXQ6IGZpeGVkO1xuXG4gIGNhcHRpb24ge1xuICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gICAgY29sb3I6ICRjb2xvci0tdGV4dC0tc3VidGxlO1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gIH1cblxuICB0ZCxcbiAgdGgge1xuICAgIHBhZGRpbmc6IDAuNWVtIDFyZW07XG4gICAgYm9yZGVyOiAxcHggc29saWQgJGNvbG9yLS10YWJsZS0tYm9yZGVyO1xuICAgIC8vIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgLy8gdmVydGljYWwtYWxpZ246IHRvcDtcblxuICAgICYuaGFsaWduLWxlZnQge1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG5cbiAgICAmLmhhbGlnbi1jZW50ZXIge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuICAgICYuaGFsaWduLXJpZ2h0IHtcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIH1cblxuICAgICYudmFsaWduLXRvcCB7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIH1cblxuICAgICYudmFsaWduLW1pZGRsZSB7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIH1cblxuICAgICYudmFsaWduLWJvdHRvbSB7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xuICAgIH1cbiAgfVxuXG4gIHRoZWFkIHtcbiAgICB0ZCxcbiAgICB0aCB7XG4gICAgICBiYWNrZ3JvdW5kOiAkY29sb3ItLXRhYmxlLS10aC0tYmc7XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgIH1cbiAgfVxufVxuIiwiLy8gQmFzZSBSaHl0aG1cbiRiYXNlLXJoeXRobTogICAgICAgICAgICAgICAgIDE4cHg7XG4kZm9udC1zaXplLS1iYXNlOiAgICAgICAgICAgICAkYmFzZS1yaHl0aG07XG4kc3BhY2luZy0tYmFzZTogICAgICAgICAgICAgICAxNnB4O1xuXG4kZm9udC1mYW1pbHktLWJhc2U6ICAgICAgICAgICBSZWRIYXRUZXh0LCBPdmVycGFzcywgJ0hlbHZldGljYSBOZXVlJywgQXJpYWwsIHNhbnMtc2VyaWY7XG4kZm9udC1mYW1pbHktLWNvZGU6ICAgICAgICAgICAnQ29uc29sYXMnLCBtb25vc3BhY2U7XG5cbi8vIFhYTCAmIFhMIGZvciBtYWluIHRpdGxlc1xuJGhlYWRpbmctLXh4bDogICAgICAgICAgICAgICAgNDhweDtcbiRoZWFkaW5nLS14bDogICAgICAgICAgICAgICAgIDIuNXJlbTtcbi8vIEJhc2UgaGVhZGluZyBsZXZlbHNcbiRoZWFkaW5nLS0xOiAgICAgICAgICAgICAgICAgIDM2cHg7XG4kaGVhZGluZy0tMjogICAgICAgICAgICAgICAgICAyOHB4O1xuJGhlYWRpbmctLTM6ICAgICAgICAgICAgICAgICAgMjRweDtcbiRoZWFkaW5nLS00OiAgICAgICAgICAgICAgICAgIDIwcHg7XG4kaGVhZGluZy0tNTogICAgICAgICAgICAgICAgICAxNnB4O1xuJGhlYWRpbmctLTY6ICAgICAgICAgICAgICAgICAgMTZweDtcblxuLy8gT3RoZXIgaGVhZGluZ3MgJiBmb250IHNpemVzXG4kaGVhZGluZy0tdG9jOiAgICAgICAgICAgICAgICAyMHB4O1xuJGhlYWRpbmctLXRvYy0tdHJhbnNmb3JtOiAgICAgbm9uZTtcbiRoZWFkaW5nLS10b2MtLXN0eWxlOiAgICAgICAgIG5vcm1hbDtcbiRoZWFkaW5nLS10b2MtLXdlaWdodDogICAgICAgIDYwMDtcbiRoZWFkaW5nLS1zZWN0aW9uOiAgICAgICAgICAgIDIwcHg7XG4kaGVhZGluZy0tc2VjdGlvbi0tdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4kaGVhZGluZy0tc2VjdGlvbi0tc3R5bGU6ICAgICBub3JtYWw7XG4kaGVhZGluZy0tc2VjdGlvbi0td2VpZ2h0OiAgICA2MDA7XG4kaGVhZGluZy0tYmxvY2s6ICAgICAgICAgICAgICAxNnB4O1xuJGhlYWRpbmctLWJsb2NrLS10cmFuc2Zvcm06ICAgbm9ybWFsO1xuJGhlYWRpbmctLWJsb2NrLS1zdHlsZTogICAgICAgbm9ybWFsO1xuJGhlYWRpbmctLWJsb2NrLS13ZWlnaHQ6ICAgICAgNzAwO1xuJGZvbnQtc2l6ZS0tbGVhZDogICAgICAgICAgICAgMjBweDsgLy8gVXNlZCBwcmVhbWJsZSBhbmQgbGVhZCBwYXJhZ3JhcGhzXG4kZm9udC1zaXplLS1zbTogICAgICAgICAgICAgICAxNHB4O1xuJGZvbnQtc2l6ZS0tbWQ6ICAgICAgICAgICAgICAgMTZweDtcbiRmb250LXNpemUtLW1vbm9zcGFjZTogICAgICAgIDE0cHg7XG5cbi8vIExpbmUgaGVpZ2h0c1xuJGxpbmUtaGVpZ2h0LS1sZzogICAgICAgICAgICAxLjM7XG4kbGluZS1oZWlnaHQtLWJhc2U6ICAgICAgICAgIDEuNTtcblxuLy8gQ29sb3JzIVxuJGNvbG9yLS1icmFuZC1wcmltYXJ5OiAgICAgICAgI2UwMDtcbiRjb2xvci0tYnJhbmQtcHJpbWFyeS1kYXJrOiAgICNjMDA7XG4kY29sb3ItLWJyYW5kLXByaW1hcnktZGFya2VyOiAjYTMwMDAwO1xuJGNvbG9yLS1iZzogICAgICAgICAgICAgICAgICAgI2ZmZjtcbiRjb2xvci0tdGV4dDogICAgICAgICAgICAgICAgICMyNTI1MjU7XG4kY29sb3ItLXRleHQtLXN1YnRsZTogICAgICAgICBsaWdodGVuKCRjb2xvci0tdGV4dCwgMjAlKTtcbiRjb2xvci0tbGluazogICAgICAgICAgICAgICAgICMwNmM7XG5cbiRjb2xvci0tYm9yZGVyOiAgICAgICAgICAgICAgICNkMmQyZDI7XG5cbiRjb2xvci0tYmctLWZvb3RlcjogICAgICAgICAgICNlZGVkZWQ7XG4kY29sb3ItLXRleHQtLWZvb3RlcjogICAgICAgICAjMjUyNTI1O1xuXG4kY29sb3ItLXRleHQtLWluZm86ICAgICAgICAgICAjMDA0MzY4O1xuJGNvbG9yLS1ib3JkZXItLWluZm86ICAgICAgICAgIzM5YTVkYztcbiRjb2xvci0tdGV4dC0td2FybmluZzogICAgICAgICM3OTU2MDA7XG4kY29sb3ItLWJvcmRlci0td2FybmluZzogICAgICAjZjBhYjAwO1xuJGNvbG9yLS10ZXh0LS1jYXV0aW9uOiAgICAgICAgIzc2M2QwNDtcbiRjb2xvci0tYm9yZGVyLS1jYXV0aW9uOiAgICAgICNlYzdhMDg7XG4kY29sb3ItLXRleHQtLWltcG9ydGFudDogICAgICAjNDcwMDAwO1xuJGNvbG9yLS1ib3JkZXItLWltcG9ydGFudDogICAgI2EzMDAwMDtcblxuJGNvbG9yLS1iZy0tY29kZS1ibG9jazogICAgICAgIzI1MjUyNTtcbiRjb2xvci0tdGV4dC0tY29kZS1ibG9jazogICAgICNmZmY7XG4kY29sb3ItLWJnLS1jb2RlLWlubGluZTogICAgICAjZGVmM2ZmO1xuJGNvbG9yLS10ZXh0LS1jb2RlLWlubGluZTogICAgIzAwNDM2ODtcblxuJGNvbG9yLS10YWJsZS0tdGgtLWJnOiAgICAgICAgI2Y1ZjVmNTsgLy8jZWRlZGVkO1xuJGNvbG9yLS10YWJsZS0tYm9yZGVyOiAgICAgICAgI2QyZDJkMjtcblxuJGNvbG9yLS1tYXJrLS1iZzogICAgICAgICAgICAgI2ZjZjhlMztcbiRjb2xvci0ta2JkLS1iZzogICAgICAgICAgICAgICMyNTI1MjU7XG4iLCIucmhkb2NzIHsgLy8gc2Fzcy1saW50OmRpc2FibGUtbGluZSBuby1tZXJnZWFibGUtc2VsZWN0b3JzXG4gIHBhZGRpbmc6IDJlbTtcbiAgLy8gbWF4LXdpZHRoOiA2NWVtOyAvLyBPcHRpbWFsIGxpbmUtbGVuZ3RoIGZvciBiZXN0IGxlZ2liaWxpdHkuXG5cbiAgLmhhcy10b2MudG9jLWxlZnQgJiB7XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgLy8gbWF4LXdpZHRoOiBub25lO1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIC8vIHNhc3MtbGludDpkaXNhYmxlIGluZGVudGF0aW9uXG4gICAgICBncmlkLXRlbXBsYXRlLWFyZWFzOlxuICAgICAgICAndG9jIGhlYWRlcidcbiAgICAgICAgJ3RvYyBtYWluJ1xuICAgICAgICAndG9jIGZvb3Rlcic7XG4gICAgICAvLyBzYXNzLWxpbnQ6ZW5hYmxlIGluZGVudGF0aW9uXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDE0cmVtIGF1dG87XG4gICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XG4gICAgICBncmlkLWNvbHVtbi1nYXA6IDJyZW07XG4gICAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG5cbiAgICAgIC5yaGRvY3MtaGVhZGVyIHtcbiAgICAgICAgcGFkZGluZzogMnJlbSAycmVtIDAgMDtcbiAgICAgICAgZ3JpZC1hcmVhOiBoZWFkZXI7XG4gICAgICAgIG1heC13aWR0aDogNjVlbTtcbiAgICAgIH1cblxuICAgICAgLnJoZG9jcy1jb250ZW50IHtcbiAgICAgICAgcGFkZGluZzogMCAycmVtIDAgMDtcbiAgICAgICAgZ3JpZC1hcmVhOiBtYWluO1xuICAgICAgICBtYXgtd2lkdGg6IDY1ZW07XG4gICAgICB9XG5cbiAgICAgIC5yaGRvY3MtZm9vdGVyIHtcbiAgICAgICAgcGFkZGluZzogMCAwIDJyZW07XG4gICAgICAgIGdyaWQtYXJlYTogZm9vdGVyO1xuICAgICAgICBtYXgtd2lkdGg6IDY1ZW07XG4gICAgICB9XG5cbiAgICAgIC5yaGRvY3MtdG9jIHtcbiAgICAgICAgZ3JpZC1hcmVhOiB0b2M7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcbiAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMjByZW0gYXV0bztcbiAgICB9XG4gIH1cbn1cblxuLy8gSGVhZGVyXG4ucmhkb2NzLWhlYWRlciB7XG4gIGgxIHtcbiAgICBtYXJnaW46IDA7XG4gICAgZm9udC1zaXplOiAkaGVhZGluZy0teHhsO1xuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWxnO1xuICB9XG59XG5cbi5yaGRvY3MtZGV0YWlscyB7XG4gIG1hcmdpbjogMTZweCAwIDQ4cHg7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbi5yaC1kb2NzLWRldGFpbHMtaXRlbSB7XG4gIG1hcmdpbjogMCAwIDhweDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMjQgLyAxNjsgLy8gR2V0dGluZyB1bml0bGVzcyBsaW5lLWhlaWdodFxufVxuXG4ucmhkb2NzLXByb2R1Y3RzIHtcbiAgbWFyZ2luOiAwIDAgMTZweDtcbiAgZm9udC1zaXplOiAyNHB4O1xuICBsaW5lLWhlaWdodDogMzEgLyAyNDsgLy8gR2V0dGluZyB1bml0bGVzcyBsaW5laGVpZ2h0XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuXG4vLyAucmhkb2NzLXByb2R1Y3QtbmFtZSB7fVxuXG4ucmhkb2NzLXByb2R1Y3QtdmVyc2lvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4ucmhkb2NzLWF1dGhvci1kZXRhaWxzIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW46IDA7XG4gIGNvbG9yOiAkY29sb3ItLXRleHQtLXN1YnRsZTtcblxuICBkdCxcbiAgZGQge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfVxuXG4gIGRkIHtcbiAgICAmOjpiZWZvcmUge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgY29udGVudDogJygnO1xuICAgIH1cblxuICAgICY6OmFmdGVyIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGNvbnRlbnQ6ICcpJztcbiAgICB9XG4gIH1cbn1cblxuLnJoZG9jcy1yZXZpc2lvbnMge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgY29sb3I6ICRjb2xvci0tdGV4dC0tc3VidGxlO1xuXG4gIGxpIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAmOm5vdCg6bGFzdC1jaGlsZCk6OmFmdGVyIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGNvbnRlbnQ6ICcsICc7XG4gICAgfVxuICB9XG5cbiAgLnJoZG9jcy1hdXRob3ItZGV0YWlscyArICYge1xuICAgICY6OmJlZm9yZSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBtYXJnaW46IDAgMC4xMjVyZW07XG4gICAgICBjb250ZW50OiAnXFwyMDE0JztcbiAgICB9XG4gIH1cbn1cblxuLnJoZG9jcy1yZXZudW1iZXIge1xuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbn1cblxuLy8gVE9DXG4ucmhkb2NzLXRvYyB7XG4gIG1hcmdpbjogMXJlbSAwIDJyZW07XG4gIHBhZGRpbmc6IDFyZW07XG4gIGJhY2tncm91bmQ6ICNmMmYyZjI7XG5cbiAgPiAqOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gIH1cblxuICAucmhkb2NzLXRvY3RpdGxlIHtcbiAgICBtYXJnaW4tdG9wOiAwO1xuICAgIGZvbnQtc2l6ZTogJGhlYWRpbmctLXRvYztcbiAgICB0ZXh0LXRyYW5zZm9ybTogJGhlYWRpbmctLXRvYy0tdHJhbnNmb3JtO1xuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWJhc2U7XG4gICAgZm9udC13ZWlnaHQ6ICRoZWFkaW5nLS10b2MtLXdlaWdodDtcbiAgfVxuXG4gIG9sIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgY291bnRlci1yZXNldDogaXRlbTtcblxuICAgIGxpIHtcbiAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgICAgbWFyZ2luOiAwLjVyZW0gMDtcblxuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMC4yNXJlbTtcbiAgICAgICAgY29udGVudDogY291bnRlcnMoaXRlbSwgJy4nKSAnLic7XG4gICAgICAgIGNvdW50ZXItaW5jcmVtZW50OiBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBQcmVhbWJsZVxuLnByZWFtYmxlIHtcbiAgbWFyZ2luOiAycmVtIDA7XG4gIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZS0tbGVhZDtcbiAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC0tYmFzZTtcblxuICAuc2lkZWJhcmJsb2NrLFxuICAuYWRtb25pdGlvbmJsb2NrIHtcbiAgICBmb250LXNpemU6IDFyZW07XG4gIH1cbn1cblxuLy8gU2VjdGlvbnNcbnNlY3Rpb24ge1xuICAmLnNlY3QxIHtcbiAgICBtYXJnaW46IDJyZW0gMCAxcmVtO1xuXG4gICAgLy8gJiArIC5zZWN0MSB7fVxuICB9XG59XG5cbi8vIEFkbW9uaXRpb25zXG4uYWRtb25pdGlvbmJsb2NrIHtcbiAgbWFyZ2luOiAycmVtIDA7XG4gIHBhZGRpbmc6IDFyZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkICRjb2xvci0tYm9yZGVyO1xuICBib3JkZXItbGVmdDogNHB4IHNvbGlkICRjb2xvci0tdGV4dDtcblxuICAmLmhhcy1pY29uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuXG4gICAgLmljb24ge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xuICAgICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgfVxuICB9XG5cbiAgLy8gJi50aXAge31cblxuICAmLm5vdGUge1xuICAgIGNvbG9yOiAkY29sb3ItLXRleHQtLWluZm87XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICRjb2xvci0tYm9yZGVyLS1pbmZvO1xuICB9XG5cbiAgJi5jYXV0aW9uIHtcbiAgICBjb2xvcjogJGNvbG9yLS10ZXh0LS1jYXV0aW9uO1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAkY29sb3ItLWJvcmRlci0tY2F1dGlvbjtcbiAgfVxuXG4gICYud2FybmluZyB7XG4gICAgY29sb3I6ICRjb2xvci0tdGV4dC0td2FybmluZztcbiAgICBib3JkZXItbGVmdC1jb2xvcjogJGNvbG9yLS1ib3JkZXItLXdhcm5pbmc7XG4gIH1cblxuICAmLmltcG9ydGFudCB7XG4gICAgY29sb3I6ICRjb2xvci0tdGV4dC0taW1wb3J0YW50O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAkY29sb3ItLWJvcmRlci0taW1wb3J0YW50O1xuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgID4gOmZpcnN0LWNoaWxkIHtcbiAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgfVxuXG4gICAgPiA6bGFzdC1jaGlsZCB7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgIH1cbiAgfVxufVxuXG4vLyBMaXRlcmFsIEJsb2NrcyAmIExpc3RpbmcgQmxvY2tzXG5wcmUge1xuICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5LS1jb2RlO1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgd29yZC1zcGFjaW5nOiBub3JtYWw7XG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgLy8gb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcbiAgZm9udC1zaXplOiAkZm9udC1zaXplLS1tb25vc3BhY2U7XG4gIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWJhc2U7XG59XG5cbjpub3QocHJlKSA+IGNvZGUge1xuICBwYWRkaW5nOiAwLjI1ZW0gMC41ZW07XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHktLWNvZGU7XG4gIGJhY2tncm91bmQ6ICRjb2xvci0tYmctLWNvZGUtaW5saW5lO1xuICBjb2xvcjogJGNvbG9yLS10ZXh0LS1jb2RlLWlubGluZTtcbiAgZm9udC1zaXplOiAkZm9udC1zaXplLS1tb25vc3BhY2U7XG4gIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWJhc2U7XG59XG5cbi5jb2xpc3Qge1xuICBvbCB7XG4gICAgbWFyZ2luOiAxcmVtIDAgMnJlbTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgICBsaSB7XG4gICAgICBtYXJnaW46IDAuNXJlbSAwO1xuICAgICAgcGFkZGluZy1sZWZ0OiAycmVtO1xuXG4gICAgICAuY29saXN0LW51bSB7XG4gICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICBtYXJnaW4tbGVmdDogLTJyZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi5jb2xpc3QtbnVtIHtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi5jb251bSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAtMC4xMjVlbTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nOiAwO1xuICBiYWNrZ3JvdW5kOiAkY29sb3ItLWJyYW5kLXByaW1hcnktZGFyaztcbiAgY29sb3I6ICNmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseS0tYmFzZTtcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xuICBmb250LXdlaWdodDogNjAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDEuMjVyZW07XG4gIGhlaWdodDogMS4yNXJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuMzVyZW07IC8vIEZvciBzb21lIHJlYXNvbiwgd2l0aCBPdmVycGFzcywgdGhpcyBsb29rcyBiZXR0ZXIuXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbi5saXRlcmFsYmxvY2ssXG4ubGlzdGluZ2Jsb2NrIHtcbiAgbWFyZ2luOiAxcmVtIDA7XG5cbiAgcHJlIHtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICAgIGJhY2tncm91bmQ6ICRjb2xvci0tYmctLWNvZGUtYmxvY2s7XG4gICAgY29sb3I6ICRjb2xvci0tdGV4dC0tY29kZS1ibG9jaztcbiAgICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5LS1jb2RlO1xuICAgIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZS0tbW9ub3NwYWNlO1xuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtLWJhc2U7XG4gIH1cbn1cblxuLy8gVmVyc2UgQmxvY2tzXG4udmVyc2VibG9jayxcbi5xdW90ZWJsb2NrIHtcbiAgbWFyZ2luOiAxcmVtIDA7XG4gIHBhZGRpbmc6IDFyZW0gMXJlbSAxcmVtIDJyZW07XG4gIGJvcmRlci1sZWZ0OiA0cHggc29saWQgJGNvbG9yLS1ib3JkZXI7XG5cbiAgPiA6Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi10b3A6IDA7XG4gIH1cblxuICAuY29udGVudCB7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseS0tYmFzZTtcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtLWxlYWQ7XG4gICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC0tYmFzZTtcbiAgfVxuXG4gIC5hdHRyaWJ1dGlvbiB7XG4gICAgZm9udC1zaXplOiAkZm9udC1zaXplLS1zbTtcbiAgICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LS1iYXNlO1xuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG5cbiAgICAuY2l0ZXRpdGxlIHtcbiAgICAgIGNvbG9yOiAkY29sb3ItLXRleHQtLXN1YnRsZTtcbiAgICB9XG5cbiAgICBjaXRlIHtcbiAgICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgIH1cbiAgfVxuXG4gIEBpbmNsdWRlIHB1bGxsZWZ0KCk7XG4gIEBpbmNsdWRlIHB1bGxyaWdodCgpO1xufVxuXG4ucXVvdGVibG9jayB7XG4gIGJsb2NrcXVvdGUge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcblxuICAgIC5jb250ZW50IHtcbiAgICAgID4gOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcblxuICAgICAgICAmOjpiZWZvcmUge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMC41cmVtO1xuICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgIGNvbnRlbnQ6ICdcXDIwMUMnO1xuICAgICAgICAgIGNvbG9yOiAkY29sb3ItLWJyYW5kLXByaW1hcnk7XG4gICAgICAgICAgZm9udC1zaXplOiAyLjc1cmVtO1xuICAgICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS4xMjVlbTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBJbWFnZSBCbG9ja3MgJiBGaWd1cmVzXG4uaW1hZ2VibG9jayB7XG4gIG1hcmdpbjogMXJlbSAwO1xuXG4gIC5jYXB0aW9uIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IDAuNXJlbSAwIDA7XG4gICAgZm9udC1zaXplOiAkZm9udC1zaXplLS1zbTtcbiAgICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LS1iYXNlO1xuICAgIGNvbG9yOiAkY29sb3ItLXRleHQtLXN1YnRsZTtcbiAgfVxuXG4gIEBpbmNsdWRlIHB1bGxsZWZ0KCk7XG4gIEBpbmNsdWRlIHB1bGxyaWdodCgpO1xuICBAaW5jbHVkZSBpbnRlcnJ1cHRlcigpO1xuXG59XG5cblxuLy8gRm9vdG5vdGVzICYgRm9vdGVyXG4ucmhkb2NzLWZvb3Rub3RlcyB7XG4gIG1hcmdpbjogM3JlbSAwIDFyZW07XG4gIHBhZGRpbmc6IDFyZW0gMCAwO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgJGNvbG9yLS1ib3JkZXI7XG5cbiAgPiBvbCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDAgMCAwIDEuNXJlbTtcblxuICAgIEBzdXBwb3J0cyAoY291bnRlci1yZXNldDogZm9vdG5vdGVudW0pIHtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgY291bnRlci1yZXNldDogZm9vdG5vdGVudW07XG5cbiAgICAgID4gbGkge1xuICAgICAgICBjb3VudGVyLWluY3JlbWVudDogZm9vdG5vdGVudW07XG5cbiAgICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgY29udGVudDogJ1snIGNvdW50ZXIoZm9vdG5vdGVudW0pICddJztcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW07XG4gICAgICAgICAgY29sb3I6ICRjb2xvci0tdGV4dC0tc3VidGxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gPiBsaSB7XG4gICAgLy8gICA+IGEge1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgfVxufVxuXG4ucmhkb2NzLWZvb3RlciB7XG4gIG1hcmdpbjogM3JlbSAwIDA7XG4gIHBhZGRpbmc6IDFyZW07XG4gIGJhY2tncm91bmQ6ICRjb2xvci0tYmctLWZvb3RlcjtcbiAgY29sb3I6ICRjb2xvci0tdGV4dC0tZm9vdGVyO1xuICBmb250LXNpemU6ICRmb250LXNpemUtLXNtO1xuICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LS1iYXNlO1xufVxuXG4vLyBVdGlsaXR5IENsYXNzZXMgZnJvbSBBc2NpaWRvY3RvclxuLmNlbnRlciB7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG59XG5cbi5zdHJldGNoIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi8vIFV0aWxpdHkgQ2xhc3Nlc1xuLnZpc3VhbGx5LWhpZGRlbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6IDFweDtcbiAgaGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogLTFweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcbiAgYm9yZGVyOiAwO1xufVxuIiwiQG1peGluIHB1bGxsZWZ0KCkge1xuICAvLyByb2xlPSdwdWxsbGVmdCdcbiAgLy8gVE9ETyBUd2VhayB3aWR0aHMgYW5kIGJyZWFrcG9pbnRzXG4gICYucHVsbGxlZnQge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1yaWdodDogM3JlbTtcbiAgICB3aWR0aDogMjVyZW07XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAtMXJlbTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHB1bGxyaWdodCgpIHtcbiAgLy8gcm9sZT0ncHVsbHJpZ2h0J1xuICAvLyBUT0RPIFR3ZWFrIHdpZHRocyBhbmQgYnJlYWtwb2ludHNcbiAgJi5wdWxscmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBtYXJnaW4tbGVmdDogM3JlbTtcbiAgICB3aWR0aDogMjVyZW07XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IC0ycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAtMTByZW07XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBpbnRlcnJ1cHRlcigkaXNtZWRpYTogdHJ1ZSwgJGhhc2NhcHRpb246IHRydWUpIHtcbiAgLy8gcm9sZT0naW50ZXJydXB0ZXInXG4gIC8vIFRPRE8gVHdlYWsgd2lkdGhzIGFuZCBicmVha3BvaW50c1xuICAmLmludGVycnVwdGVyIHtcbiAgICBtYXJnaW46IDJyZW0gMDtcblxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAtMnJlbTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAtMXJlbTtcblxuICAgICAgQGlmICRoYXNjYXB0aW9uIHtcbiAgICAgICAgLmNhcHRpb24ge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMXJlbTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAtMTByZW07XG5cbiAgICAgIEBpZiAkaGFzY2FwdGlvbiB7XG4gICAgICAgIC5jYXB0aW9uIHtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcmVtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRpc21lZGlhIHtcbiAgICAgIGltZyB7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qIFByaXNtSlMgMS4xNS4wIFJlZCBIYXQgVGhlbWUgKi9cbi8qKlxuXG4gKi9cblxuY29kZVtjbGFzcyo9J2xhbmd1YWdlLSddLFxucHJlW2NsYXNzKj0nbGFuZ3VhZ2UtJ10ge1xuICAvLyBjb2xvcjogI2NjYztcbiAgLy8gYmFja2dyb3VuZDogbm9uZTtcbiAgLy8gZm9udC1mYW1pbHk6IENvbnNvbGFzLCBNb25hY28sICdBbmRhbGUgTW9ubycsICdVYnVudHUgTW9ubycsIG1vbm9zcGFjZTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcblxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgd29yZC1zcGFjaW5nOiBub3JtYWw7XG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDsgLy8gTmVjZXNzYXJ5IGZvciBsb25nIHN0cmluZ3Mgb2YgY2hhcnMsIGxpa2Ugc2hhMjU2OjQzODIwODgwMWM0ODA2NTQ4NDYwYjI3YmQxZmJjYjdiYjE4ODI3M2QxMzg3MWFiNDNmXG4gIC8vIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XG4gIC8vIGxpbmUtaGVpZ2h0OiAxLjU7XG5cbiAgLW1vei10YWItc2l6ZTogNDtcbiAgLW8tdGFiLXNpemU6IDQ7XG4gIHRhYi1zaXplOiA0O1xuXG4gIC13ZWJraXQtaHlwaGVuczogbm9uZTtcbiAgLW1vei1oeXBoZW5zOiBub25lO1xuICAtbXMtaHlwaGVuczogbm9uZTtcbiAgaHlwaGVuczogbm9uZTtcblxufVxuXG4vKiBDb2RlIGJsb2NrcyAqL1xucHJlW2NsYXNzKj0nbGFuZ3VhZ2UtJ10ge1xuICBwYWRkaW5nOiAxZW07XG4gIG1hcmdpbjogMC41ZW0gMDtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPSdsYW5ndWFnZS0nXSxcbnByZVtjbGFzcyo9J2xhbmd1YWdlLSddIHtcbiAgYmFja2dyb3VuZDogIzI1MjUyNTtcbn1cblxuLyogSW5saW5lIGNvZGUgKi9cbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPSdsYW5ndWFnZS0nXSB7XG4gIHBhZGRpbmc6IDAuMWVtO1xuICBib3JkZXItcmFkaXVzOiAwLjNlbTtcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cblxuLnRva2VuLmNvbW1lbnQsXG4udG9rZW4uYmxvY2stY29tbWVudCxcbi50b2tlbi5wcm9sb2csXG4udG9rZW4uZG9jdHlwZSxcbi50b2tlbi5jZGF0YSB7XG4gIGNvbG9yOiAjOTk5O1xufVxuXG4udG9rZW4ucHVuY3R1YXRpb24ge1xuICBjb2xvcjogI2NjYztcbn1cblxuLnRva2VuLnRhZyxcbi50b2tlbi5hdHRyLW5hbWUsXG4udG9rZW4ubmFtZXNwYWNlLFxuLnRva2VuLmRlbGV0ZWQge1xuICBjb2xvcjogI2UyNzc3YTtcbn1cblxuLnRva2VuLmZ1bmN0aW9uLW5hbWUge1xuICBjb2xvcjogIzYxOTZjYztcbn1cblxuLnRva2VuLmJvb2xlYW4sXG4udG9rZW4ubnVtYmVyLFxuLnRva2VuLmZ1bmN0aW9uIHtcbiAgY29sb3I6ICNmMDhkNDk7XG59XG5cbi50b2tlbi5wcm9wZXJ0eSxcbi50b2tlbi5jbGFzcy1uYW1lLFxuLnRva2VuLmNvbnN0YW50LFxuLnRva2VuLnN5bWJvbCB7XG4gIGNvbG9yOiAjZjhjNTU1O1xufVxuXG4udG9rZW4uc2VsZWN0b3IsXG4udG9rZW4uaW1wb3J0YW50LFxuLnRva2VuLmF0cnVsZSxcbi50b2tlbi5rZXl3b3JkLFxuLnRva2VuLmJ1aWx0aW4ge1xuICBjb2xvcjogI2NjOTljZDtcbn1cblxuLnRva2VuLnN0cmluZyxcbi50b2tlbi5jaGFyLFxuLnRva2VuLmF0dHItdmFsdWUsXG4udG9rZW4ucmVnZXgsXG4udG9rZW4udmFyaWFibGUge1xuICBjb2xvcjogIzdlYzY5OTtcbn1cblxuLnRva2VuLm9wZXJhdG9yLFxuLnRva2VuLmVudGl0eSxcbi50b2tlbi51cmwge1xuICBjb2xvcjogIzY3Y2RjYztcbn1cblxuLnRva2VuLmltcG9ydGFudCxcbi50b2tlbi5ib2xkIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi50b2tlbi5pdGFsaWMge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi50b2tlbi5lbnRpdHkge1xuICBjdXJzb3I6IGhlbHA7XG59XG5cbi50b2tlbi5pbnNlcnRlZCB7XG4gIGNvbG9yOiByZ2IoMCwgMTI4LCAwKTtcbn1cbiIsIi8vQGltcG9ydCAnLi4vZm9udHMvZm9udC1hd2Vzb21lJztcblxuLmljb24ge1xuICAmLmZhIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gIH1cblxuICBhICYge1xuICAgIGN1cnNvcjogaW5oZXJpdDtcbiAgfVxufVxuXG4uYWRtb25pdGlvbmJsb2NrIC5pY29uIHtcbiAgJltjbGFzc149J2ZhIGljb24tJ10ge1xuICAgIGZvbnQtc2l6ZTogMi41ZW07XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICB9XG5cbiAgJi5pY29uLW5vdGU6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnXFxmMDVhJztcbiAgICBjb2xvcjogJGNvbG9yLS1ib3JkZXItLWluZm87XG4gIH1cblxuICAmLmljb24tdGlwOmJlZm9yZSB7XG4gICAgY29udGVudDogJ1xcZjBlYic7XG4gIH1cblxuICAmLmljb24td2FybmluZzpiZWZvcmUge1xuICAgIC8vIEBleHRlbmQgLmZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlO1xuICAgIGNvbnRlbnQ6ICdcXGYwNzEnO1xuICAgIGNvbG9yOiAkY29sb3ItLWJvcmRlci0td2FybmluZztcbiAgfVxuXG4gICYuaWNvbi1jYXV0aW9uOmJlZm9yZSB7XG4gICAgLy8gQGV4dGVuZCAuZmEtZmlyZTtcbiAgICAvLyBjb250ZW50OiAnXFxmMDZkJzsgLy8gZmlyZT8hXG4gICAgY29udGVudDogJ1xcZjA3MSc7XG4gICAgY29sb3I6ICRjb2xvci0tYm9yZGVyLS1jYXV0aW9uO1xuICB9XG5cbiAgJi5pY29uLWltcG9ydGFudDpiZWZvcmUge1xuICAgIC8vIEBleHRlbmQgLmljb24tZXhjbGFtYXRpb24tY2lyY2xlO1xuICAgIGNvbnRlbnQ6ICdcXGYwNmEnO1xuICAgIGNvbG9yOiAkY29sb3ItLWJvcmRlci0taW1wb3J0YW50O1xuICB9XG59XG4iLCIvLyBUZW1wb3JhcnkgU3R5bGVzIGZvciB0aGUgUGFudGhlb24gMSB0byBQYW50aGVvbiAyIHRyYW5zaXRpb24gaW4gQ1AgQ2hyb21lIE5pbWJ1c1xuLy8gUmVtb3ZlIGRlcGVuZGVuY3kgKG9yIGRlbGV0ZSkgd2hlbiBQYW50aGVvbiAyIG1vdmVzIHRvIG5ldyBhZ25vc3RpYyBjaHJvbWluZyBzZXJ2aWNlXG5cbi5saXRlcmFsYmxvY2ssXG4ubGlzdGluZ2Jsb2NrIHtcbiAgcHJlIHtcbiAgICBjb2RlIHtcbiAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgdGV4dC1zaGFkb3c6IG5vbmU7XG4gICAgICB3aGl0ZS1zcGFjZTogaW5oZXJpdCAhaW1wb3J0YW50OyAvLyBwb3NzaWJseSBiYWQuXG4gICAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAgIH1cbiAgfVxufVxuIl19 */
