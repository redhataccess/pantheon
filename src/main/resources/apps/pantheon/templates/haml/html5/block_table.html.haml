%table{:id=>@id, :class=>['tableblock', "frame-#{attr :frame, 'all'}", "grid-#{attr :grid, 'all'}", spread?, role],
    :style=>((css_style = [("width: #{attr :tablepcwidth}%;" unless autowidth? || spread?),
                       ("float: #{attr :float};" if attr? :float)].compact * ' ').empty? ? nil : css_style)}
  -# Counting Tables in WHOLE Doc for unique IDs
  - $tableNum += 1
  -# Using colsArray to store thead / th IDs
  - colsArray = Array.new
  -# Check for title/caption
  - if title?
    %caption.title=captioned_title
  - unless (attr :rowcount).zero?
    %colgroup
      - if autowidth?
        - @columns.each do
          %col
      - else
        - @columns.each do |col|
          %col(style="width: #{col.attr :colpcwidth}%;")
    - [:head, :foot, :body].select {|tblsec| !@rows[tblsec].empty? }.each do |tblsec|
      - haml_tag "t#{tblsec}" do
        - @rows[tblsec].each do |row|
          %tr
            - columnCnt = 0
            - row.each do |cell|
              -# store reference of content in advance to resolve attribute assignments in cells
              - if tblsec == :head
                - cell_content = cell.text
              - else
                - case cell.style
                - when :verse, :literal
                  - cell_content = cell.text
                - else
                  - cell_content = cell.content
              - cell_css_style = (@document.attr? :cellbgcolor) ? %(background-color: #{@document.attr :cellbgcolor};) : nil
              -# Set scopes, IDs and headers attributes for cells
              - if tblsec == :head
                - head_scope = 'col'
                - head_id = cell_content.tr(" ", "_").downcase.prepend("table#{$tableNum}_th_")
                - colsArray.push(head_id)
                -# If there's a colspan, ensure that we add the ID to the array for each column the TH spans, so the TDs reference properly
                - if cell.colspan
                  - (1..cell.colspan-1).each do |i|
                    - colsArray.push(head_id)
                - headers_attr = nil
              - else
                - head_scope = nil
                - head_id = nil
                - headers_attr = colsArray[columnCnt]
              - haml_tag (tblsec == :head || cell.style == :header ? 'th' : 'td'), :<, :class=>['tableblock', "halign-#{cell.attr :halign}", "valign-#{cell.attr :valign}"],
                  :colspan=>cell.colspan, :rowspan=>cell.rowspan, :style=>cell_css_style, :scope=>head_scope, :id=>head_id, :headers=>headers_attr do
                - if tblsec == :head
                  =cell_content
                - else
                  - case cell.style
                  - when :asciidoc
                    =cell_content
                  - when :verse
                    .verse~cell_content
                  - when :literal
                    .literal
                      %pre=cell_content
                  - else
                    -# Not sure what this is for...?
                    - cell_content.each do |text|
                      %p.tableblock<=text
                - columnCnt += 1
